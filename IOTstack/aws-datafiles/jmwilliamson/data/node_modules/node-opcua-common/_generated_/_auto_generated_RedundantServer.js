// --------- This code has been automatically generated !!! 2018-02-08T07:25:25.229Z
"use strict";
/**
 * @module opcua.address_space.types
 */
var assert = require("node-opcua-assert");
var util = require("util");
var _  = require("underscore");
var makeNodeId = require("node-opcua-nodeid").makeNodeId;
var schema_helpers =  require("node-opcua-factory/src/factories_schema_helpers");
var extract_all_fields                       = schema_helpers.extract_all_fields;
var resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
var initialize_field                         = schema_helpers.initialize_field;
var initialize_field_array                   = schema_helpers.initialize_field_array;
var check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
var _defaultTypeMap = require("node-opcua-factory/src/factories_builtin_types")._defaultTypeMap;
var ec = require("node-opcua-basic-types");
var encodeArray = ec.encodeArray;
var decodeArray = ec.decodeArray;
var makeExpandedNodeId = require("node-opcua-nodeid/src/expanded_nodeid").makeExpandedNodeId;
var generate_new_id = require("node-opcua-factory").generate_new_id;
var _enumerations = require("node-opcua-factory/src/factories_enumerations")._private._enumerations;
var schema = require("../schemas/RedundantServer_schema").RedundantServer_Schema;
var getFactory = require("node-opcua-factory/src/factories_factories").getFactory;
var BaseUAObject = require("node-opcua-factory/src/factories_baseobject").BaseUAObject;

/**
 * 
 * @class RedundantServer
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 * @param  [options.serverId] {String} 
 * @param  [options.serviceLevel] {Byte} 
 * @param  [options.serverState] {ServerState} 
 */
function RedundantServer(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    var self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);
    if (options === null) { 
        BaseUAObject.call(this,options);
        return ;
    }

    /**
      * 
      * @property serverId
      * @type {String}
      */
    self.serverId = initialize_field(schema.fields[0], options.serverId);

    /**
      * 
      * @property serviceLevel
      * @type {Byte}
      */
    self.serviceLevel = initialize_field(schema.fields[1], options.serviceLevel);

    /**
      * 
      * @property serverState
      * @type {ServerState}
      */
    self.setServerState(initialize_field(schema.fields[2], options.serverState));

   // Object.preventExtensions(self);
}
util.inherits(RedundantServer,BaseUAObject);

//## Define Enumeration setters
RedundantServer.prototype.setServerState = function(value) {
   var coercedValue = _enumerations.ServerState.typedEnum.get(value);
   /* istanbul ignore next */
   if (coercedValue === undefined || coercedValue === null) {
      throw new Error("value cannot be coerced to ServerState: " + value);
   }
   this.serverState = coercedValue;
};
RedundantServer.prototype.encodingDefaultBinary = makeExpandedNodeId(855,0);
RedundantServer.prototype._schema = schema;

var encode_String = _defaultTypeMap.String.encode;
var decode_String = _defaultTypeMap.String.decode;
var encode_Byte = _defaultTypeMap.Byte.encode;
var decode_Byte = _defaultTypeMap.Byte.decode;
var encode_ServerState = _enumerations.ServerState.encode;
var decode_ServerState = _enumerations.ServerState.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
RedundantServer.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encode_String(this.serverId,stream);
    encode_Byte(this.serviceLevel,stream);
    encode_ServerState(this.serverState,stream);
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 * @param [option] {object} 
 */
RedundantServer.prototype.decode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream,options);
    this.serverId = decode_String(stream,options);
    this.serviceLevel = decode_Byte(stream,options);
    this.serverState = decode_ServerState(stream,options);
};
RedundantServer.possibleFields = [
  "serverId",
         "serviceLevel",
         "serverState"
];


exports.RedundantServer = RedundantServer;
var register_class_definition = require("node-opcua-factory/src/factories_factories").register_class_definition;
register_class_definition("RedundantServer",RedundantServer);
