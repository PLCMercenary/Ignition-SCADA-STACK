// --------- This code has been automatically generated !!! 2018-02-08T07:25:34.723Z
"use strict";
/**
 * @module opcua.address_space.types
 */
var assert = require("node-opcua-assert");
var util = require("util");
var _  = require("underscore");
var makeNodeId = require("node-opcua-nodeid").makeNodeId;
var schema_helpers =  require("node-opcua-factory/src/factories_schema_helpers");
var extract_all_fields                       = schema_helpers.extract_all_fields;
var resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
var initialize_field                         = schema_helpers.initialize_field;
var initialize_field_array                   = schema_helpers.initialize_field_array;
var check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
var _defaultTypeMap = require("node-opcua-factory/src/factories_builtin_types")._defaultTypeMap;
var ec = require("node-opcua-basic-types");
var encodeArray = ec.encodeArray;
var decodeArray = ec.decodeArray;
var makeExpandedNodeId = require("node-opcua-nodeid/src/expanded_nodeid").makeExpandedNodeId;
var generate_new_id = require("node-opcua-factory").generate_new_id;
var _enumerations = require("node-opcua-factory/src/factories_enumerations")._private._enumerations;
var schema = require("../schemas/EventFilterResult_schema").EventFilterResult_Schema;
var getFactory = require("node-opcua-factory/src/factories_factories").getFactory;
var DiagnosticInfo = getFactory("DiagnosticInfo");
var ContentFilterResult = require("./_auto_generated_ContentFilterResult").ContentFilterResult;
var BaseUAObject = require("node-opcua-factory/src/factories_baseobject").BaseUAObject;
var MonitoringFilter = getFactory("MonitoringFilter");

/**
 * 
 * @class EventFilterResult
 * @constructor
 * @extends MonitoringFilter
 * @param  options {Object}
 * @param  [options.selectClauseResults] {StatusCode[]} 
 * @param  [options.selectClauseDiagnosticInfos] {DiagnosticInfo[]} 
 * @param  [options.whereClauseResult] {ContentFilterResult} 
 */
function EventFilterResult(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    var self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    MonitoringFilter.call(this,options);
    if (options === null) { 
        MonitoringFilter.call(this,options);
        self.selectClauseDiagnosticInfos =  null; /* null array */
        self.whereClauseResult =  null; /* new ContentFilterResult(null); */
        return ;
    }

    /**
      * 
      * @property selectClauseResults
      * @type {StatusCode[]}
      */
    self.selectClauseResults = initialize_field_array(schema.fields[0], options.selectClauseResults);

    /**
      * 
      * @property selectClauseDiagnosticInfos
      * @type {DiagnosticInfo[]}
      */
    self.selectClauseDiagnosticInfos = [];
    if (options.selectClauseDiagnosticInfos) {
        assert(_.isArray(options.selectClauseDiagnosticInfos));
        self.selectClauseDiagnosticInfos = options.selectClauseDiagnosticInfos.map(function(e){ return new DiagnosticInfo(e); } );
    }

    /**
      * 
      * @property whereClauseResult
      * @type {ContentFilterResult}
      */
    self.whereClauseResult =  new ContentFilterResult( options.whereClauseResult);

   // Object.preventExtensions(self);
}
util.inherits(EventFilterResult,MonitoringFilter);
EventFilterResult.prototype.encodingDefaultBinary = makeExpandedNodeId(736,0);
EventFilterResult.prototype.encodingDefaultXml = makeExpandedNodeId(735,0);
EventFilterResult.prototype._schema = schema;

var encode_StatusCode = _defaultTypeMap.StatusCode.encode;
var decode_StatusCode = _defaultTypeMap.StatusCode.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
EventFilterResult.prototype.encode = function(stream,options) {
    // call base class implementation first
    MonitoringFilter.prototype.encode.call(this,stream,options);
    encodeArray(this.selectClauseResults, stream, encode_StatusCode);
    encodeArray(this.selectClauseDiagnosticInfos,stream,function(obj,stream){ obj.encode(stream,options); }); 
   this.whereClauseResult.encode(stream,options);
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 * @param [option] {object} 
 */
EventFilterResult.prototype.decode = function(stream,options) {
    // call base class implementation first
    MonitoringFilter.prototype.decode.call(this,stream,options);
    this.selectClauseResults = decodeArray(stream, decode_StatusCode);
    this.selectClauseDiagnosticInfos = decodeArray(stream, function(stream) { 
       var obj = new DiagnosticInfo(null);
       obj.decode(stream,options);
       return obj; 
    });
    this.whereClauseResult.decode(stream,options);
};
EventFilterResult.possibleFields = [
  "selectClauseResults",
         "selectClauseDiagnosticInfos",
         "whereClauseResult"
];


exports.EventFilterResult = EventFilterResult;
var register_class_definition = require("node-opcua-factory/src/factories_factories").register_class_definition;
register_class_definition("EventFilterResult",EventFilterResult);
