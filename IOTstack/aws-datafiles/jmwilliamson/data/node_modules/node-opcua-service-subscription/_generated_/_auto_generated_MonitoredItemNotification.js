// --------- This code has been automatically generated !!! 2018-02-08T07:25:34.593Z
"use strict";
/**
 * @module opcua.address_space.types
 */
var assert = require("node-opcua-assert");
var util = require("util");
var _  = require("underscore");
var makeNodeId = require("node-opcua-nodeid").makeNodeId;
var schema_helpers =  require("node-opcua-factory/src/factories_schema_helpers");
var extract_all_fields                       = schema_helpers.extract_all_fields;
var resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
var initialize_field                         = schema_helpers.initialize_field;
var initialize_field_array                   = schema_helpers.initialize_field_array;
var check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
var _defaultTypeMap = require("node-opcua-factory/src/factories_builtin_types")._defaultTypeMap;
var ec = require("node-opcua-basic-types");
var encodeArray = ec.encodeArray;
var decodeArray = ec.decodeArray;
var makeExpandedNodeId = require("node-opcua-nodeid/src/expanded_nodeid").makeExpandedNodeId;
var generate_new_id = require("node-opcua-factory").generate_new_id;
var _enumerations = require("node-opcua-factory/src/factories_enumerations")._private._enumerations;
var schema = require("../schemas/MonitoredItemNotification_schema").MonitoredItemNotification_Schema;
var getFactory = require("node-opcua-factory/src/factories_factories").getFactory;
var DataValue = getFactory("DataValue");
var BaseUAObject = require("node-opcua-factory/src/factories_baseobject").BaseUAObject;

/**
 * 
 * @class MonitoredItemNotification
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 * @param  [options.clientHandle] {IntegerId} Client-supplied handle for the MonitoredItem. 
 * @param  [options.value] {DataValue} The StatusCode, value and timestamp(s) of the monitored Attribute depending on the sampling and queuing configuration.
 */
function MonitoredItemNotification(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    var self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);
    if (options === null) { 
        BaseUAObject.call(this,options);
        self.value =  null; /* new DataValue(null); */
        return ;
    }

    /**
      * Client-supplied handle for the MonitoredItem. 
      * @property clientHandle
      * @type {IntegerId}
      */
    self.clientHandle = initialize_field(schema.fields[0], options.clientHandle);

    /**
      * The StatusCode, value and timestamp(s) of the monitored Attribute depending on the sampling and queuing configuration.
      * @property value
      * @type {DataValue}
      */
    self.value =  new DataValue( options.value);

   // Object.preventExtensions(self);
}
util.inherits(MonitoredItemNotification,BaseUAObject);
MonitoredItemNotification.prototype.encodingDefaultBinary = makeExpandedNodeId(808,0);
MonitoredItemNotification.prototype.encodingDefaultXml = makeExpandedNodeId(807,0);
MonitoredItemNotification.prototype._schema = schema;

var encode_IntegerId = _defaultTypeMap.IntegerId.encode;
var decode_IntegerId = _defaultTypeMap.IntegerId.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
MonitoredItemNotification.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encode_IntegerId(this.clientHandle,stream);
   this.value.encode(stream,options);
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 * @param [option] {object} 
 */
MonitoredItemNotification.prototype.decode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream,options);
    this.clientHandle = decode_IntegerId(stream,options);
    this.value.decode(stream,options);
};
MonitoredItemNotification.possibleFields = [
  "clientHandle",
         "value"
];


exports.MonitoredItemNotification = MonitoredItemNotification;
var register_class_definition = require("node-opcua-factory/src/factories_factories").register_class_definition;
register_class_definition("MonitoredItemNotification",MonitoredItemNotification);
