{"version":3,"sources":["opcua-iiot-response.js"],"names":["module","exports","RED","install","require","entry","config","nodes","OPCUAIIoTResponse","createNode","this","name","showStatusActivities","showErrors","node","status","fill","shape","text","on","msg","nodetype","analyzeReadResults","analyzeWriteResults","analyzeListenerResults","analyzeMethodResults","payload","err","coreResponse","internalDebugLog","send","handlePayloadStatusCode","setNodeStatus","analyzeSubscribeResultStatus","analyzeEventResultStatus","entryStatus","informationText","fillColor","handlePayloadArrayOfStatusCodes","length","results","statusCodes","handlePayloadObject","handlePayloadArrayOfObjects","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","statusCode","includes","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2"],"mappings":"AAOA,aAOAA,OAAOC,QAAU,SAAUC,GAA3BF,QAAOC,sBAAyBE,UAC9BC,IAAAA,EAAQA,QAAA,mCA6NGC,EAAAA,MAAAA,aAAkC,sBAzN7C,SAA4BC,GAA5BJ,EAAAK,MAASC,WAAAA,KAAmBF,GAC1BJ,KAAIK,KAAME,EAAAA,KACVC,KAAKC,qBAALL,EAAAM,qBACAF,KAAKE,WAAAA,EAALC,WAGA,IAAIC,EAAOJ,KAEXI,EAAKC,OAAO,CAACC,KAAM,OAAQC,MAAO,OAAQC,KAAM,QAEhDJ,EAAKK,GAAG,QAAS,SAAUC,GAA3BN,IACE,GAAIM,EAAAC,SACF,OAAQA,EAAAA,UACN,IAAA,OACEP,EAAKQ,mBAALF,GACEN,MAGF,IAAK,QAALA,EAAKS,oBAALH,GACEN,MAGF,IAAK,SAALA,EAAKU,uBAALJ,GACEN,MAGF,IAAK,SAALA,EAAKW,qBAALL,GACEN,MAGF,QAAAM,GAAAA,EAAAM,SACEZ,EAAIM,wBAAoBA,IAI7B,MAAAO,GACDC,EAAYC,iBAAAF,GACZC,EAAAA,YACAd,EAAIA,MAAKD,EAAAA,GAKXC,EAAKgB,KAAKV,KAGZN,EAAKQ,mBAAqB,SAAUF,GAApCN,OAAKQ,EAAAA,UACH,IAAA,gBAKE,IAAK,gBAALR,EAAKiB,wBAALX,GACEN,MAGF,IAAK,OAALA,EAAKkB,cAAL,CAAA,EAAA,EAAA,GAAA,QACElB,MAGF,QAAAA,EAAAiB,wBAAAX,KAMJN,EAAKU,uBAAyB,SAAUJ,GAAxCN,OAAKU,EAAAA,YACH,IAAA,YACEV,EAAKmB,6BAALb,GACEN,MAGF,IAAK,QAALA,EAAKoB,yBAALd,KASJN,EAAKW,qBAAuB,SAAUL,GAAtCN,OAAKW,EAAAA,YACH,IAAA,QAKE,IAAK,UAALX,EAAKiB,wBAALX,KASJN,EAAKkB,cAAgB,SAAUG,EAAaC,GAA5CtB,IAAKkB,EAAL,QAnGiB5B,EAsGX+B,EAAY,KAAhBE,EAAIF,UAtGW/B,EA0GX+B,EAAY,KAAhBE,EAAIF,OAIJrB,EAAKC,OAAO,CAACC,KAAMqB,EAAWpB,MAAO,MAAOC,KAAMkB,KAGpDtB,EAAKS,oBAAsB,SAAUH,GAArCN,IAAKS,EAAAA,EAALe,gCAA0ClB,GACxCA,EAAIe,YAAcrB,EAClBM,EAAIe,cAAcA,EAAlB,QAAAA,EAAA,GAAA,QAAAA,EAAA,GAAA,UAAAA,EAAA,KAIFrB,EAAKmB,6BAA+B,SAAUb,GAA9CN,EAAKmB,wBAAAA,IAILnB,EAAKoB,yBAA2B,SAAUd,GAA1CN,EAAKoB,wBAALd,IAIAN,EAAKiB,wBAA0B,SAAUX,GAAzCN,IAAKiB,EAAAA,CAAAA,EAAAA,EAAAA,GAGHI,EAAIf,EAAIM,QAAQa,QAAUnB,EAAIM,QAAQc,SAAWpB,EAAIM,QAAQe,YAA7CF,EAAAA,4BAAiCnB,GAE1CN,EAAA4B,oBAAAtB,GAIPA,EAAIe,YAAcA,EAElBrB,EAAKkB,cAAcG,EAAa,QAAUA,EAAY,GAAK,QAAUA,EAAY,GAAK,UAAYA,EAAY,KAGhHrB,EAAK6B,4BAA8B,SAAUvB,GAA7CN,IAAK6B,EAAAA,KACCtC,EAAJ,CAAA,EAAA,EAAA,GACI8B,EAAAA,GAGAf,EAAIM,QAAQc,QAAhBA,EAAQd,EAAQc,QAAhBA,QACEA,EAAUpB,QAAAqB,YADZD,EAEWpB,EAAIM,QAAQe,YAAhBrB,EAEAM,QAAAa,SAAAC,EAAApB,EAAAM,SATyC,IAAAkB,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAUG,IAAA,IAAAC,EAAAC,EAAAT,EAAAU,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAClD,IADkDvC,EAAA2C,EAAAM,OAClDC,YAAAlD,EAAAkD,WAAA5C,KAIG,OAAQN,EAAMkD,WAAW5C,MAfmB,IAAA,OAAAwB,EAAA,IAAA,EAAA,MAmB1C,IAAK,MAnBqCA,EAAA,IAAA,EAahD,MAAK9B,QAUOA,EAAMkD,WAAW5C,KAAK6C,SAAS,QATrCnD,EAAMkD,IAAclD,EACdA,EAAMkD,WAAd5C,KAAA6C,SAAA,OACErB,EAAA,IAAA,EAEEA,EAAA,IAAA,OAIFA,EAAA,IAAA,EAtB0C,MAAAR,GAAAkB,GAAA,EAAAC,EAAAnB,EAAA,QAAA,KAAAiB,GAAAK,EAAAQ,QAAAR,EAAAQ,SAAA,QAAA,GAAAZ,EAAA,MAAAC,GA0BtCX,OAAAA,GAGDrB,EAAA4B,oBAAA,SAAAtB,GAdL,IAAAe,EAAA,CAAA,EAAA,EAAA,GAf4C,IAgC5CA,EAAAA,QAAAA,SAAAf,EAAAM,QAAAe,eACDN,EAAArB,EAAA6B,4BAAAvB,IAjC6CA,EAAAM,SAAAN,EAAAM,QAAA6B,WAAA,GAAAnC,EAAAM,QAAA6B,WAAA5C,KAAA,OAAAS,EAAAM,QAAA6B,WAAA5C,MAAA,IAAA,OAAAwB,EAAA,IAAA,EAAA,MAAA,IAAA,MAAAA,EAAA,IAAA,EAAA,MAAA,QAAAf,EAAAM,QAAA6B,WAAA5C,KAAA6C,SAAA,QAAArB,EAAA,IAAA,EAAAf,EAAAM,QAAA6B,WAAA5C,KAAA6C,SAAA,OA2DtCrB,EAAY,IAAM,EA3D9BA,EAAA,IAAA,OAiEMA,EAAY,IAAM,OArBrBA,EAAA,IAAA,EAGC,OAAIf,GAGEe,EAAAA,gCAAA,SAAAf,GACA,IAAAf,EAAA,KACF8B,EAAA,CAAA,EAAA,EAAA,GAEE,GAAAf,EAAAM,QAAAe,YAAA,CAAA,IAAAiB,GAAA,EAAAC,GAAA,EAAAC,OAAAb,EAAA,IACF,IAAA,IAAAc,EAAAC,EAAA1C,EAAAM,QAAAe,YAAAS,OAAAC,cAAAO,GAAAG,EAAAC,EAAAV,QAAAC,MAAAK,GAAA,EACE,IADFrD,EAAAwD,EAAAP,QACU5B,EAAJf,KACFwB,OAAAA,EAAAA,MACD,IAFD,OAGEA,EAAY,IAAM,EADb,MAGLA,IAAAA,MACDA,EAAA,IAAA,EAdL,MADF,QAkBEA,EAAAxB,KAAA6C,SAAA,QACDrB,EAAA,IAAA,EACI9B,EAAAM,KAAA6C,SAAA,OACLrB,EAAA,IAAA,EA0BUA,EAAY,IAAM,OApB3BG,EAAAA,IAAAA,EApBK,MAAAX,GAAAgC,GAAA,EAAAC,EAAAjC,EAAA,QAAA,KAAA+B,GAAAI,EAAAL,QAAAK,EAAAL,SAAA,QAAA,GAAAE,EAAA,MAAAC,SAwBRzB,EAAQT,IAAQe,EAAa,OAAAN","file":"../opcua-iiot-response.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2017,2018 - Klaus Landsdorf (http://bianco-royal.de/)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * Response analyser Node-RED node for OPC UA IIoT nodes.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreResponse = require('./core/opcua-iiot-core-response')\n  const EMPTY_LIST = 0\n\n  function OPCUAIIoTResponse (config) {\n    RED.nodes.createNode(this, config)\n    this.name = config.name\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n\n    let node = this\n\n    node.status({fill: 'blue', shape: 'ring', text: '...'})\n\n    node.on('input', function (msg) {\n      try {\n        if (msg.nodetype) {\n          switch (msg.nodetype) {\n            case 'read':\n              node.analyzeReadResults(msg)\n              break\n\n            case 'write':\n              node.analyzeWriteResults(msg)\n              break\n\n            case 'listen':\n              node.analyzeListenerResults(msg)\n              break\n\n            case 'method':\n              node.analyzeMethodResults(msg)\n              break\n\n            default:\n              if (msg && msg.payload) {\n                node.handlePayloadStatusCode(msg)\n              }\n          }\n        }\n      } catch (err) {\n        coreResponse.internalDebugLog(err)\n        if (node.showErrors) {\n          node.error(err, msg)\n        }\n      }\n\n      node.send(msg)\n    })\n\n    node.analyzeReadResults = function (msg) {\n      switch (msg.readtype) {\n        case 'AllAttributes':\n          node.handlePayloadStatusCode(msg) // TODO: do more\n          break\n\n        case 'VariableValue':\n          node.handlePayloadStatusCode(msg) // TODO: do less\n          break\n\n        case 'Meta':\n          node.setNodeStatus([0, 0, 0], 'None')\n          break\n\n        default:\n          node.handlePayloadStatusCode(msg) // TODO: do default\n          break\n      }\n    }\n\n    node.analyzeListenerResults = function (msg) {\n      switch (msg.injectType) {\n        case 'subscribe':\n          node.analyzeSubscribeResultStatus(msg)\n          break\n\n        case 'event':\n          node.analyzeEventResultStatus(msg)\n          break\n\n        default:\n          break\n      }\n    }\n\n    node.analyzeMethodResults = function (msg) {\n      switch (msg.methodType) {\n        case 'basic':\n          node.handlePayloadStatusCode(msg)\n          break\n\n        case 'complex':\n          node.handlePayloadStatusCode(msg)\n          break\n\n        default:\n          break\n      }\n    }\n\n    node.setNodeStatus = function (entryStatus, informationText) {\n      let fillColor = 'green'\n\n      if (entryStatus[2] > EMPTY_LIST) {\n        fillColor = 'yellow'\n      }\n\n      if (entryStatus[1] > EMPTY_LIST) {\n        fillColor = 'red'\n      }\n\n      node.status({fill: fillColor, shape: 'dot', text: informationText})\n    }\n\n    node.analyzeWriteResults = function (msg) {\n      let entryStatus = node.handlePayloadArrayOfStatusCodes(msg)\n      msg.entryStatus = entryStatus\n      node.setNodeStatus(entryStatus, 'Good:' + entryStatus[0] + ' Bad:' + entryStatus[1] + ' Other:' + entryStatus[2])\n    }\n\n    node.analyzeSubscribeResultStatus = function (msg) {\n      node.handlePayloadStatusCode(msg)\n    }\n\n    node.analyzeEventResultStatus = function (msg) {\n      node.handlePayloadStatusCode(msg)\n    }\n\n    node.handlePayloadStatusCode = function (msg) {\n      let entryStatus = [0, 0, 0]\n\n      if (msg.payload.length || msg.payload.results || msg.payload.statusCodes) {\n        entryStatus = node.handlePayloadArrayOfObjects(msg)\n      } else {\n        entryStatus = node.handlePayloadObject(msg)\n      }\n\n      msg.entryStatus = entryStatus\n\n      node.setNodeStatus(entryStatus, 'Good:' + entryStatus[0] + ' Bad:' + entryStatus[1] + ' Other:' + entryStatus[2])\n    }\n\n    node.handlePayloadArrayOfObjects = function (msg) {\n      let entry = null\n      let entryStatus = [0, 0, 0]\n      let results = []\n\n      if (msg.payload.results) {\n        results = msg.payload.results\n      } else if (msg.payload.statusCodes) {\n        results = msg.payload.statusCodes\n      } else {\n        if (msg.payload.length) { results = msg.payload }\n      }\n\n      for (entry of results) {\n        if (entry.statusCode && entry.statusCode.name) {\n          switch (entry.statusCode.name) {\n            case 'Good':\n              entryStatus[0] += 1\n              break\n            case 'Bad':\n              entryStatus[1] += 1\n              break\n            default:\n              if (entry.statusCode.name.includes('Good')) {\n                entryStatus[0] += 1\n              } else if (entry.statusCode.name.includes('Bad')) {\n                entryStatus[1] += 1\n              } else {\n                entryStatus[2] += 1\n              }\n          }\n        } else {\n          entryStatus[2] += 1\n        }\n      }\n\n      return entryStatus\n    }\n\n    node.handlePayloadObject = function (msg) {\n      let entryStatus = [0, 0, 0]\n\n      if (msg.payload.results || msg.payload.statusCodes) {\n        entryStatus = node.handlePayloadArrayOfObjects(msg)\n      }\n\n      if (msg.payload && msg.payload.statusCode) {\n        if (msg.payload.statusCode.name) {\n          switch (msg.payload.statusCode.name) {\n            case 'Good':\n              entryStatus[0] += 1\n              break\n            case 'Bad':\n              entryStatus[1] += 1\n              break\n            default:\n              if (msg.payload.statusCode.name.includes('Good')) {\n                entryStatus[0] += 1\n              } else if (msg.payload.statusCode.name.includes('Bad')) {\n                entryStatus[1] += 1\n              } else {\n                entryStatus[2] += 1\n              }\n          }\n        } else {\n          entryStatus[2] += 1\n        }\n      } else {\n        entryStatus[2] += 1\n      }\n\n      return entryStatus\n    }\n\n    node.handlePayloadArrayOfStatusCodes = function (msg) {\n      let entry = null\n      let entryStatus = [0, 0, 0]\n\n      if (msg.payload.statusCodes) {\n        for (entry of msg.payload.statusCodes) {\n          if (entry && entry.name) {\n            switch (entry.name) {\n              case 'Good':\n                entryStatus[0] += 1\n                break\n              case 'Bad':\n                entryStatus[1] += 1\n                break\n              default:\n                if (entry.name.includes('Good')) {\n                  entryStatus[0] += 1\n                } else if (entry.name.includes('Bad')) {\n                  entryStatus[1] += 1\n                } else {\n                  entryStatus[2] += 1\n                }\n            }\n          } else {\n            entryStatus[2] += 1\n          }\n        }\n      } else {\n        entryStatus[2] += 1\n      }\n\n      return entryStatus\n    }\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Response', OPCUAIIoTResponse)\n}\n"]}