{"version":3,"sources":["opcua-iiot-server-cmd.js"],"names":["module","exports","RED","install","require","nodes","registerType","config","OPCUAIIoTCMD","createNode","commandtype","this","nodeId","node","on","msg","nodetype","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","addressSpaceItem","addressSpaceItems","Symbol","iterator","next","done","value","payload","core","internalDebugLog","JSON","stringify","err","return","send"],"mappings":"AAOA,aAOAA,OAAOC,QAAU,SAAUC,GAA3BF,QAAOC,sBAAyBE,UAC9BC,IAAAA,EAAQA,QAAA,0BAY2BF,EAAAG,MAAAC,aAAA,4BATnC,SAAuBC,GAAvBL,EAAAG,MAASG,WAAcD,KAAvBA,GACEL,KAAIG,YAAMI,EAAVC,YACAC,KAAKD,OAAAA,EAAcH,OACnBI,KAAKC,KAALL,EAAcA,KAGd,IAAIM,EAAOF,KAEXE,EAAKC,GAAG,QAAS,SAAUC,GAA3BF,GAAiB,WAAZC,EAAGE,SAAwB,CAC9B,IAAID,OAAAA,EAD0BE,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAE5B,IAAA,IAAAC,EAAAC,EAAIC,EAAJC,kBAAAC,OAAAC,cAAAT,GAAAI,EAAAC,EAAAK,QAAAC,MAAAX,GAAA,EAAIM,EAAJF,EAAAQ,OAD6Bd,EAAA,CAAAe,QAAA,GAAAf,MAAA,gBAAAA,SAAA,QAMvBe,QAAQpB,YAAcG,EAAKH,YANJK,EAAAe,QAAAlB,OAAAW,EAAAX,OAExBW,EAAAA,QAAAA,SAQDQ,EAAKC,iBAAiB,yBAA2BC,KAAKC,UAAUnB,IAPlEA,EAAAA,KAAOe,IAJmB,MAAAK,GAAAjB,GAAA,EAAAC,EAAAgB,EAAA,QAAA,KAAAlB,GAAAK,EAAAc,QAAAd,EAAAc,SAAA,QAAA,GAAAlB,EAAA,MAAAC,SAQ1BJ,EAAAA,CAAAA,QAAYH,GASdG,MAAY,gBAPVA,SAAQe,QACNC,QAAKC,YAAAA,EAAiBtB,YACtBG,EAAAA,QAAKwB,OAALxB,EAAAD,OAEHmB,EAAAC,iBAAA,yBAAAC,KAAAC,UAAAnB,IAb4BF,EAAAwB,KAAAtB","file":"../opcua-iiot-server-cmd.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2017,2018 - Klaus Landsdorf (http://bianco-royal.de/)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * Address space object Node-RED node.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let core = require('./core/opcua-iiot-core')\n\n  function OPCUAIIoTCMD (config) {\n    RED.nodes.createNode(this, config)\n    this.commandtype = config.commandtype\n    this.nodeId = config.nodeId\n    this.name = config.name\n\n    let node = this\n\n    node.on('input', function (msg) {\n      if (msg.nodetype === 'inject') {\n        let addressSpaceItem\n        for (addressSpaceItem of msg.addressSpaceItems) {\n          msg = {payload: {}} // clean message\n          msg.topic = 'ServerCommand'\n          msg.nodetype = 'CMD'\n          msg.payload.commandtype = node.commandtype\n          msg.payload.nodeId = addressSpaceItem.nodeId\n\n          if (msg.payload.nodeId) {\n            core.internalDebugLog('node msg stringified: ' + JSON.stringify(msg))\n            node.send(msg)\n          }\n        }\n      } else {\n        msg = {payload: {}} // clean message\n        msg.topic = 'ServerCommand'\n        msg.nodetype = 'CMD'\n        msg.payload.commandtype = node.commandtype\n        msg.payload.nodeId = node.nodeId\n\n        core.internalDebugLog('node msg stringified: ' + JSON.stringify(msg))\n        node.send(msg)\n      }\n    })\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Server-Command', OPCUAIIoTCMD)\n}\n"]}