{"version":3,"sources":["core/opcua-iiot-core.js"],"names":["require","install","de","biancoroyal","opcua","iiot","core","nodeOPCUA","nodeOPCUAId","internalDebugLog","detailDebugLog","specialDebugLog","OBJECTS_ROOT","test","os","platform","endianness","isWindows","hostname","pathToNodeOPCUA","replace","requireResolve","getNodeOPCUAPath","this","getPathFromRequireResolve","resolve","unit","unitAbbreviation","calcMillisecondsByTimeAndUnit","time","convertedTime","buildBrowseMessage","topic","browseName","nodeClassType","typeDefinition","payload","toInt32","x","uintSixteen","Math","pow","getNodeStatus","statusValue","statusLog","fillValue","shapeValue","fill","shape","status","value","variantValue","datatype","DataType","Float","dataType","Double","UInt16","uint16","Uint16Array","UInt32","uint32","Uint32Array","Int32","Int16","Int64","Boolean","LocalizedText","DateTime","String","JSON","stringify","getVariantValue","parseFloat","parseInt","toString","getBasicDataTypes","name","Null","Byte","convertDataValue","convertDataValueByDataType","convertedValue","hasOwnProperty","Guid","ByteString","XmlElement","NodeId","valueType","ExpandedNodeId","StatusCode","ExtensionObject","DataValue","Variant","DiagnosticInfo","NodeIdType","Buffer","isNaN","toLowerCase","nodeNamespace","msg","err","nodeItem","nodeId","substring","regex_ns_s","regex_ns_b","regex_ns_g","parseNamspaceFromMsgTopic","type","includes","indexOf","item","nodeIdentifier","identifier","parseIdentifierFromMsgTopic","NUMERIC","BYTESTRING","STRING","parseIdentifierFromItemNodeId","namespace","addressSpaceItems","newOPCUANodeIdFromItemNodeId","itemList","nodesToWrite","index","newOPCUANodeIdFromMsgTopic","valuesToWrite","buildNodesToWrite","attributeId","indexRange","length","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","push","AttributeIds","Value","buildNewVariant","datatypeName","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","buildNodesToRead","nodesToRead","nodePayloadList","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","nodeList","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_iterator5","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","buildNodesToListen","addressItemsToRead","availableMemory","freemem","totalmem","isSessionBad","nodeState","node","setNodeStatusTo","opcuaSession","connector","isNodeId","identifierType","GUID","module","exports"],"mappings":"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","file":"../../core/opcua-iiot-core.js","sourcesContent":["/**\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018 - Klaus Landsdorf (http://bianco-royal.de/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\nrequire('source-map-support').install()\n\n/**\n * Nested namespace settings.\n *\n * @type {{biancoroyal: {opcua: {iiot: {core: {}}}}}}\n *\n * @Namesapce de.biancoroyal.opcua.iiot.core\n */\nvar de = de || {biancoroyal: {opcua: {iiot: {core: {}}}}} // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.nodeOPCUA = de.biancoroyal.opcua.iiot.core.nodeOPCUA || require('node-opcua') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.nodeOPCUAId = de.biancoroyal.opcua.iiot.core.nodeOPCUAId || require('node-opcua-nodeid') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.internalDebugLog = de.biancoroyal.opcua.iiot.core.internalDebugLog || require('debug')('opcuaIIoT:core') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.detailDebugLog = de.biancoroyal.opcua.iiot.core.detailDebugLog || require('debug')('opcuaIIoT:core:details') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.specialDebugLog = de.biancoroyal.opcua.iiot.core.specialDebugLog || require('debug')('opcuaIIoT:core:special') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.OBJECTS_ROOT = de.biancoroyal.opcua.iiot.core.OBJECTS_ROOT || 'ns=0;i=84' // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.TEN_SECONDS_TIMEOUT = de.biancoroyal.opcua.iiot.core.TEN_SECONDS_TIMEOUT || 10 // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.os = de.biancoroyal.opcua.iiot.core.os || require('os') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.isWindows = de.biancoroyal.opcua.iiot.core.isWindows || /^win/.test(de.biancoroyal.opcua.iiot.core.os.platform()) // eslint-disable-line no-use-before-define\n\nde.biancoroyal.opcua.iiot.core.internalDebugLog(de.biancoroyal.opcua.iiot.core.os.endianness())\nde.biancoroyal.opcua.iiot.core.internalDebugLog(de.biancoroyal.opcua.iiot.core.os.hostname())\nde.biancoroyal.opcua.iiot.core.internalDebugLog(de.biancoroyal.opcua.iiot.core.os.platform())\nde.biancoroyal.opcua.iiot.core.internalDebugLog(de.biancoroyal.opcua.iiot.core.os.type())\nde.biancoroyal.opcua.iiot.core.internalDebugLog(de.biancoroyal.opcua.iiot.core.os.arch())\n\nde.biancoroyal.opcua.iiot.core.getPathFromRequireResolve = function (requireResolve) {\n  let pathToNodeOPCUA = ''\n\n  if (this.isWindows) {\n    pathToNodeOPCUA = requireResolve.replace('\\\\index.js', '')\n  } else {\n    pathToNodeOPCUA = requireResolve.replace('/index.js', '')\n  }\n\n  this.internalDebugLog('path to node-opcua: ' + pathToNodeOPCUA)\n\n  return pathToNodeOPCUA\n}\n\nde.biancoroyal.opcua.iiot.core.getNodeOPCUAPath = function () {\n  return this.getPathFromRequireResolve(require.resolve('node-opcua'))\n}\n\nde.biancoroyal.opcua.iiot.core.getNodeOPCUAClientPath = function () {\n  return this.getPathFromRequireResolve(require.resolve('node-opcua-client'))\n}\n\nde.biancoroyal.opcua.iiot.core.getNodeOPCUAServerPath = function () {\n  return this.getPathFromRequireResolve(require.resolve('node-opcua-server'))\n}\n\nde.biancoroyal.opcua.iiot.core.getTimeUnitName = function (unit) {\n  let unitAbbreviation = ''\n\n  switch (unit) {\n    case 'ms':\n      unitAbbreviation = 'msec.'\n      break\n    case 's':\n      unitAbbreviation = 'sec.'\n      break\n    case 'm':\n      unitAbbreviation = 'min.'\n      break\n    case 'h':\n      unitAbbreviation = 'h.'\n      break\n    default:\n      break\n  }\n\n  return unitAbbreviation\n}\n\nde.biancoroyal.opcua.iiot.core.calcMillisecondsByTimeAndUnit = function (time, unit) {\n  let convertedTime\n\n  switch (unit) {\n    case 'ms':\n      convertedTime = time\n      break\n    case 's':\n      convertedTime = time * 1000 // seconds\n      break\n    case 'm':\n      convertedTime = time * 60000 // minutes\n      break\n    case 'h':\n      convertedTime = time * 3600000 // hours\n      break\n    default:\n      convertedTime = 10000 // 10 sec.\n      break\n  }\n\n  return convertedTime\n}\n\nde.biancoroyal.opcua.iiot.core.buildBrowseMessage = function (topic) {\n  return {\n    'topic': topic,\n    'nodeId': '',\n    'browseName': '',\n    'nodeClassType': '',\n    'typeDefinition': '',\n    'payload': ''\n  }\n}\n\nde.biancoroyal.opcua.iiot.core.toInt32 = function (x) {\n  let uintSixteen = x\n\n  if (uintSixteen >= Math.pow(2, 15)) {\n    uintSixteen = x - Math.pow(2, 16)\n    return uintSixteen\n  } else {\n    return uintSixteen\n  }\n}\n\nde.biancoroyal.opcua.iiot.core.getNodeStatus = function (statusValue, statusLog) {\n  let fillValue = 'yellow'\n  let shapeValue = 'ring'\n\n  switch (statusValue) {\n    case 'initialize':\n    case 'connecting':\n      fillValue = 'yellow'\n      break\n    case 'connected':\n    case 'keepalive':\n    case 'subscribe':\n    case 'started':\n      if (!statusLog) {\n        statusValue = 'active'\n        shapeValue = 'dot'\n      }\n      fillValue = 'green'\n      break\n    case 'active':\n    case 'subscribed':\n    case 'listening':\n      fillValue = 'green'\n      shapeValue = 'dot'\n      break\n    case 'disconnected':\n    case 'terminated':\n      fillValue = 'red'\n      break\n    case 'waiting':\n      fillValue = 'blue'\n      shapeValue = 'dot'\n      statusValue = 'waiting ...'\n      break\n    case 'error':\n      fillValue = 'red'\n      shapeValue = 'dot'\n      break\n    default:\n      if (!statusValue) {\n        fillValue = 'blue'\n        statusValue = 'waiting ...'\n      }\n  }\n\n  return {fill: fillValue, shape: shapeValue, status: statusValue}\n}\n\nde.biancoroyal.opcua.iiot.core.buildNewVariant = function (datatype, value) {\n  let opcua = de.biancoroyal.opcua.iiot.core.nodeOPCUA\n  let variantValue = null\n\n  this.detailDebugLog('buildNewVariant datatype: ' + datatype + ' value:' + value)\n\n  switch (datatype) {\n    case 'Float':\n    case opcua.DataType.Float:\n      variantValue = {\n        dataType: opcua.DataType.Float,\n        value: parseFloat(value)\n      }\n      break\n    case 'Double':\n    case opcua.DataType.Double:\n      variantValue = {\n        dataType: opcua.DataType.Double,\n        value: parseFloat(value)\n      }\n      break\n    case 'UInt16':\n    case opcua.DataType.UInt16:\n      let uint16 = new Uint16Array([value])\n      variantValue = {\n        dataType: opcua.DataType.UInt16,\n        value: uint16[0]\n      }\n      break\n    case 'UInt32':\n    case opcua.DataType.UInt32:\n      let uint32 = new Uint32Array([value])\n      variantValue = {\n        dataType: opcua.DataType.UInt32,\n        value: uint32[0]\n      }\n      break\n    case 'Int32':\n    case opcua.DataType.Int32:\n      variantValue = {\n        dataType: opcua.DataType.Int32,\n        value: parseInt(value)\n      }\n      break\n    case 'Int16':\n    case opcua.DataType.Int16:\n      variantValue = {\n        dataType: opcua.DataType.Int16,\n        value: parseInt(value)\n      }\n      break\n    case 'Int64':\n    case opcua.DataType.Int64:\n      variantValue = {\n        dataType: opcua.DataType.Int64,\n        value: parseInt(value)\n      }\n      break\n    case 'Boolean':\n    case opcua.DataType.Boolean:\n      if (value && value !== 'false') {\n        variantValue = {\n          dataType: opcua.DataType.Boolean,\n          value: true\n        }\n      } else {\n        variantValue = {\n          dataType: opcua.DataType.Boolean,\n          value: false\n        }\n      }\n      break\n    case 'LocalizedText':\n    case opcua.DataType.LocalizedText:\n      variantValue = {\n        dataType: opcua.DataType.LocalizedText,\n        value: JSON.parse(value) /* [{text:'Hello', locale:'en'}, {text:'Hallo', locale:'de'} ... ] */\n      }\n      break\n    case 'DateTime':\n    case opcua.DataType.DateTime:\n      variantValue = {\n        dataType: opcua.DataType.DateTime,\n        value: new Date(value)\n      }\n      break\n    default:\n      variantValue = {\n        dataType: opcua.DataType.String,\n        value: value\n      }\n      break\n  }\n\n  this.detailDebugLog('buildNewVariant variantValue: ' + JSON.stringify(variantValue))\n\n  return variantValue\n}\n\nde.biancoroyal.opcua.iiot.core.getVariantValue = function (datatype, value) {\n  let opcua = de.biancoroyal.opcua.iiot.core.nodeOPCUA\n\n  switch (datatype) {\n    case 'Float':\n    case 'Double':\n    case opcua.DataType.Double:\n      return parseFloat(value)\n    case 'UInt16':\n    case opcua.DataType.UInt16:\n      let uint16 = new Uint16Array([value])\n      return uint16[0]\n    case 'UInt32':\n    case opcua.DataType.UInt32:\n      let uint32 = new Uint32Array([value])\n      return uint32[0]\n    case 'Int16':\n    case opcua.DataType.Int16:\n    case 'Int32':\n    case 'Integer':\n    case opcua.DataType.Int32:\n    case 'Int64':\n    case opcua.DataType.Int64:\n      return parseInt(value)\n    case 'Boolean':\n    case opcua.DataType.Boolean:\n      return (value && value !== 'false')\n    case 'DateTime':\n    case opcua.DataType.DateTime:\n      return new Date(value)\n    case 'String':\n    case opcua.DataType.String:\n      return (typeof value !== 'string') ? value.toString() : value\n    default:\n      return value\n  }\n}\n\nde.biancoroyal.opcua.iiot.core.getBasicDataTypes = function () {\n  let opcua = de.biancoroyal.opcua.iiot.core.nodeOPCUA\n\n  return [\n    {name: 'Null', dataType: opcua.DataType.Null},\n    {name: 'Boolean', dataType: opcua.DataType.Boolean},\n    {name: 'SByte', dataType: opcua.DataType.SByte},\n    {name: 'Byte', dataType: opcua.DataType.Byte},\n    {name: 'Int16', dataType: opcua.DataType.Int16},\n    {name: 'UInt16', dataType: opcua.DataType.UInt16},\n    {name: 'Int32', dataType: opcua.DataType.Int32},\n    {name: 'UInt32', dataType: opcua.DataType.UInt32},\n    {name: 'Int64', dataType: opcua.DataType.Int64},\n    {name: 'UInt64', dataType: opcua.DataType.UInt64},\n    {name: 'Float', dataType: opcua.DataType.Float},\n    {name: 'Double', dataType: opcua.DataType.Double},\n    {name: 'DateTime', dataType: opcua.DataType.DateTime},\n    {name: 'String', dataType: opcua.DataType.String},\n    {name: 'Guid', dataType: opcua.DataType.Guid},\n    {name: 'ByteString', dataType: opcua.DataType.ByteString},\n    {name: 'XmlElement', dataType: opcua.DataType.XmlElement},\n    {name: 'NodeId', dataType: opcua.DataType.NodeId},\n    {name: 'ExpandedNodeId', dataType: opcua.DataType.ExpandedNodeId},\n    {name: 'StatusCode', dataType: opcua.DataType.StatusCode},\n    {name: 'LocalizedText', dataType: opcua.DataType.LocalizedText},\n    {name: 'ExtensionObject', dataType: opcua.DataType.ExtensionObject},\n    {name: 'DataValue', dataType: opcua.DataType.DataValue},\n    {name: 'Variant', dataType: opcua.DataType.Variant},\n    {name: 'DiagnosticInfo', dataType: opcua.DataType.DiagnosticInfo}\n  ]\n}\n\nde.biancoroyal.opcua.iiot.core.convertDataValue = function (value) {\n  return de.biancoroyal.opcua.iiot.core.convertDataValueByDataType(value, value.dataType)\n}\n\nde.biancoroyal.opcua.iiot.core.convertDataValueByDataType = function (value, dataType) {\n  let opcua = de.biancoroyal.opcua.iiot.core.nodeOPCUA\n  let convertedValue = null\n\n  if (!value.hasOwnProperty('value')) {\n    this.specialDebugLog('value has no value and that is not allowed ' + JSON.stringify(value))\n    return value\n  }\n\n  let valueType = typeof value.value\n\n  this.detailDebugLog('convertDataValue: ' + JSON.stringify(value) +\n    ' value origin type ' + valueType + ' convert to' + ' ' + dataType)\n\n  try {\n    switch (dataType) {\n      case 'NodeId':\n      case opcua.DataType.NodeId:\n        convertedValue = value.value.toString()\n        break\n      case 'NodeIdType':\n      case opcua.DataType.NodeIdType:\n        if (value.value instanceof Buffer) {\n          convertedValue = value.value.toString()\n        } else {\n          convertedValue = value.value\n        }\n        break\n      case 'ByteString':\n      case opcua.DataType.ByteString:\n        convertedValue = value.value\n        break\n      case 'Byte':\n      case opcua.DataType.Byte:\n        if (valueType === 'boolean') {\n          convertedValue = value.value ? 1 : 0\n        } else {\n          convertedValue = parseInt(value.value)\n        }\n        break\n      case opcua.DataType.QualifiedName:\n        convertedValue = value.value.toString()\n        break\n      case 'LocalizedText':\n      case opcua.DataType.LocalizedText:\n        convertedValue = value.value\n        break\n      case 'Float':\n      case opcua.DataType.Float:\n        if (isNaN(value.value)) {\n          convertedValue = value.value\n        } else {\n          convertedValue = parseFloat(value.value)\n        }\n        break\n      case 'Double':\n      case opcua.DataType.Double:\n        if (isNaN(value.value)) {\n          convertedValue = value.value\n        } else {\n          convertedValue = parseFloat(value.value)\n        }\n        break\n      case 'UInt16':\n      case opcua.DataType.UInt16:\n        let uint16 = new Uint16Array([value.value])\n        convertedValue = uint16[0]\n        break\n      case 'UInt32':\n      case opcua.DataType.UInt32:\n        let uint32 = new Uint32Array([value.value])\n        convertedValue = uint32[0]\n        break\n      case 'Int16':\n      case opcua.DataType.Int16:\n      case 'Int32':\n      case opcua.DataType.Int32:\n      case 'Int64':\n      case opcua.DataType.Int64:\n        if (valueType === 'boolean') {\n          convertedValue = value.value ? 1 : 0\n        } else {\n          if (isNaN(value.value)) {\n            convertedValue = value.value\n          } else {\n            convertedValue = parseInt(value.value)\n          }\n        }\n        break\n      case 'Boolean':\n      case opcua.DataType.Boolean:\n        if (valueType === 'boolean') {\n          convertedValue = value.value\n        } else {\n          if (isNaN(value.value)) {\n            convertedValue = (value.value && value.value.toString().toLowerCase() !== 'false')\n          } else {\n            convertedValue = (value.value)\n          }\n        }\n        break\n      case 'String':\n      case opcua.DataType.String:\n        if (valueType !== 'string') {\n          convertedValue = value.value.toString()\n        } else {\n          convertedValue = value.value\n        }\n        break\n      case 'Null':\n      case opcua.DataType.Null:\n        convertedValue = null\n        break\n      default:\n        this.internalDebugLog('convertDataValue unused DataType: ' + dataType)\n        if (value.hasOwnProperty('value')) {\n          convertedValue = value.value\n        } else {\n          convertedValue = null\n        }\n        break\n    }\n  } catch (err) {\n    this.detailDebugLog('convertDataValue ' + err)\n  }\n\n  this.detailDebugLog('convertDataValue is: ' + convertedValue)\n\n  return convertedValue\n}\n\nde.biancoroyal.opcua.iiot.core.regex_ns_i = /ns=([0-9]+);i=([0-9]+)/\nde.biancoroyal.opcua.iiot.core.regex_ns_s = /ns=([0-9]+);s=(.*)/\nde.biancoroyal.opcua.iiot.core.regex_ns_b = /ns=([0-9]+);b=(.*)/\nde.biancoroyal.opcua.iiot.core.regex_ns_g = /ns=([0-9]+);g=(.*)/\n\nde.biancoroyal.opcua.iiot.core.parseNamspaceFromMsgTopic = function (msg) {\n  let nodeNamespace = null\n\n  if (msg && msg.topic) {\n    // TODO: real parsing instead of string operations\n    // TODO: which type are relevant here? (String, Integer ...)\n    nodeNamespace = msg.topic.substring(3, msg.topic.indexOf(';'))\n  }\n\n  return nodeNamespace\n}\n\nde.biancoroyal.opcua.iiot.core.parseNamspaceFromItemNodeId = function (item) {\n  let nodeNamespace = null\n  let nodeItem = item.nodeId || item\n\n  if (nodeItem) {\n    // TODO: real parsing instead of string operations\n    // TODO: which type are relevant here? (String, Integer ...)\n    nodeNamespace = nodeItem.substring(3, nodeItem.indexOf(';'))\n  }\n\n  return nodeNamespace\n}\n\nde.biancoroyal.opcua.iiot.core.parseIdentifierFromMsgTopic = function (msg) {\n  let nodeIdentifier = null\n\n  if (msg && msg.topic) {\n    // TODO: real parsing instead of string operations\n    if (msg.topic.toString().includes(';i=')) {\n      nodeIdentifier = {\n        identifier: parseInt(msg.topic.substring(msg.topic.indexOf(';i=') + 3)),\n        type: de.biancoroyal.opcua.iiot.core.nodeOPCUAId.NodeIdType.NUMERIC\n      }\n    } else {\n      if (msg.topic.toString().includes(';b=')) {\n        nodeIdentifier = {\n          identifier: msg.topic.substring(msg.topic.indexOf(';b=') + 3),\n          type: de.biancoroyal.opcua.iiot.core.nodeOPCUAId.NodeIdType.BYTESTRING\n        }\n      } else {\n        nodeIdentifier = {\n          identifier: msg.topic.substring(msg.topic.indexOf(';s=') + 3),\n          type: de.biancoroyal.opcua.iiot.core.nodeOPCUAId.NodeIdType.STRING\n        }\n      }\n    }\n  }\n\n  return nodeIdentifier\n}\n\nde.biancoroyal.opcua.iiot.core.parseIdentifierFromItemNodeId = function (item) {\n  let nodeIdentifier = null\n  let nodeItem = item.nodeId || item\n\n  if (nodeItem) {\n    // TODO: real parsing instead of string operations\n    if (nodeItem.includes(';i=')) {\n      nodeIdentifier = {\n        identifier: parseInt(nodeItem.substring(nodeItem.indexOf(';i=') + 3)),\n        type: de.biancoroyal.opcua.iiot.core.nodeOPCUAId.NodeIdType.NUMERIC\n      }\n    } else {\n      if (nodeItem.includes(';b=')) {\n        nodeIdentifier = {\n          identifier: nodeItem.substring(nodeItem.indexOf(';b=') + 3),\n          type: de.biancoroyal.opcua.iiot.core.nodeOPCUAId.NodeIdType.STRING\n        }\n      } else {\n        nodeIdentifier = {\n          identifier: nodeItem.substring(nodeItem.indexOf(';s=') + 3),\n          type: de.biancoroyal.opcua.iiot.core.nodeOPCUAId.NodeIdType.STRING\n        }\n      }\n    }\n  }\n\n  return nodeIdentifier\n}\n\nde.biancoroyal.opcua.iiot.core.newOPCUANodeIdFromItemNodeId = function (item) {\n  let namespace = de.biancoroyal.opcua.iiot.core.parseNamspaceFromItemNodeId(item)\n  let nodeIdentifier = de.biancoroyal.opcua.iiot.core.parseIdentifierFromItemNodeId(item)\n\n  this.internalDebugLog('newOPCUANodeIdFromItemNodeId: ' + JSON.stringify(item) + ' -> ' + JSON.stringify(nodeIdentifier) + ' namespace:' + namespace)\n  return new de.biancoroyal.opcua.iiot.core.nodeOPCUAId.NodeId(nodeIdentifier.type, nodeIdentifier.identifier, namespace)\n}\n\nde.biancoroyal.opcua.iiot.core.newOPCUANodeIdFromMsgTopic = function (msg) {\n  let namespace = de.biancoroyal.opcua.iiot.core.parseNamspaceFromMsgTopic(msg)\n  let nodeIdentifier = de.biancoroyal.opcua.iiot.core.parseIdentifierFromMsgTopic(msg)\n\n  this.internalDebugLog('newOPCUANodeIdFromMsgTopic: ' + JSON.stringify(nodeIdentifier))\n  return new de.biancoroyal.opcua.iiot.core.nodeOPCUAId.NodeId(nodeIdentifier.type, nodeIdentifier.identifier, namespace)\n}\n\nde.biancoroyal.opcua.iiot.core.buildNodesToWrite = function (msg) {\n  let opcua = de.biancoroyal.opcua.iiot.core.nodeOPCUA\n  let nodesToWrite = []\n\n  this.detailDebugLog('buildNodesToWrite input: ' + JSON.stringify(msg))\n  let item = null\n\n  // compatible mode to nodesToWrite of node-opcua\n  if (!msg.addressSpaceItems || !msg.addressSpaceItems.length) {\n    let itemList = msg.payload.nodesToWrite || msg.nodesToWrite\n    if (itemList && itemList.length) {\n      msg.addressSpaceItems = itemList\n    }\n  }\n\n  if (msg.addressSpaceItems) {\n    let index = 0\n    if (msg.valuesToWrite) {\n      for (item of msg.addressSpaceItems) {\n        nodesToWrite.push({\n          nodeId: this.newOPCUANodeIdFromItemNodeId(item),\n          attributeId: opcua.AttributeIds.Value,\n          indexRange: null,\n          value: {value: this.buildNewVariant(item.datatypeName, msg.valuesToWrite[index++])}\n        })\n      }\n    } else {\n      for (item of msg.addressSpaceItems) {\n        if (item.value) {\n          nodesToWrite.push({\n            nodeId: this.newOPCUANodeIdFromItemNodeId(item),\n            attributeId: opcua.AttributeIds.Value,\n            indexRange: null,\n            value: {value: this.buildNewVariant(item.datatypeName, item.value)}\n          })\n        } else {\n          nodesToWrite.push({\n            nodeId: this.newOPCUANodeIdFromItemNodeId(item),\n            attributeId: opcua.AttributeIds.Value,\n            indexRange: null,\n            value: {value: this.buildNewVariant(item.datatypeName, (msg.payload.length && msg.payload.length === msg.addressSpaceItems.length) ? msg.payload[index++] : msg.payload)}\n          })\n        }\n      }\n    }\n  }\n\n  this.internalDebugLog('buildNodesToWrite output: ' + JSON.stringify(nodesToWrite))\n\n  return nodesToWrite\n}\n\nde.biancoroyal.opcua.iiot.core.buildNodesToRead = function (msg) {\n  let nodesToRead = []\n  let item = null\n\n  this.detailDebugLog('buildNodesToRead input: ' + JSON.stringify(msg))\n\n  let nodePayloadList = msg.payload.nodesToRead || msg.payload.nodesToWrite\n  if (nodePayloadList && nodePayloadList.length) {\n    // read to read\n    for (item of nodePayloadList) {\n      item = item.nodeId || item\n      nodesToRead.push(item.toString())\n    }\n  } else {\n    let nodeList = msg.nodesToRead || msg.nodesToWrite\n    if (nodeList && nodeList.length) {\n      // legacy\n      for (item of nodeList) {\n        item = item.nodeId || item\n        nodesToRead.push(item.toString())\n      }\n    } else {\n      // new structure\n      if (msg.payload.addressSpaceItems && msg.payload.addressSpaceItems.length) {\n        for (item of msg.payload.addressSpaceItems) {\n          nodesToRead.push(item.nodeId)\n        }\n      } else {\n        if (msg.addressSpaceItems && msg.addressSpaceItems.length) {\n          for (item of msg.addressSpaceItems) {\n            nodesToRead.push(item.nodeId)\n          }\n        }\n      }\n    }\n  }\n\n  this.internalDebugLog('buildNodesToRead output: ' + JSON.stringify(nodesToRead))\n\n  return nodesToRead\n}\n\nde.biancoroyal.opcua.iiot.core.buildNodesToListen = function (msg) {\n  return msg.addressItemsToRead || msg.addressSpaceItems\n}\n\nde.biancoroyal.opcua.iiot.core.availableMemory = function () {\n  return this.os.freemem() / this.os.totalmem() * 100.0\n}\n\nde.biancoroyal.opcua.iiot.core.isSessionBad = function (err) {\n  return (err.toString().includes('BadSession') || err.toString().includes('Invalid Channel'))\n}\n\nde.biancoroyal.opcua.iiot.core.setNodeInitalState = function (nodeState, node) {\n  switch (nodeState) {\n    case 'INIT':\n      node.setNodeStatusTo('connecting')\n      break\n    case 'OPEN':\n      node.opcuaSession = node.connector.opcuaSession\n      node.setNodeStatusTo('active')\n      break\n    case 'LOCKED':\n      node.setNodeStatusTo('locked')\n      break\n    case 'UNLOCKED':\n      node.setNodeStatusTo('unlocked')\n      break\n    default:\n      node.setNodeStatusTo('waiting')\n  }\n}\n\nde.biancoroyal.opcua.iiot.core.isNodeId = function (nodeId) {\n  if (!nodeId || !nodeId.identifierType) {\n    return false\n  }\n\n  switch (nodeId.identifierType) {\n    case this.nodeOPCUA.NodeIdType.NUMERIC:\n    case this.nodeOPCUA.NodeIdType.STRING:\n    case this.nodeOPCUA.NodeIdType.GUID:\n      return true\n    default:\n      return false\n  }\n}\n\nmodule.exports = de.biancoroyal.opcua.iiot.core\n"]}