// --------- This code has been automatically generated !!! 2018-02-08T07:25:25.221Z
"use strict";
/**
 * @module opcua.address_space.types
 */
var assert = require("node-opcua-assert");
var util = require("util");
var _  = require("underscore");
var makeNodeId = require("node-opcua-nodeid").makeNodeId;
var schema_helpers =  require("node-opcua-factory/src/factories_schema_helpers");
var extract_all_fields                       = schema_helpers.extract_all_fields;
var resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
var initialize_field                         = schema_helpers.initialize_field;
var initialize_field_array                   = schema_helpers.initialize_field_array;
var check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
var _defaultTypeMap = require("node-opcua-factory/src/factories_builtin_types")._defaultTypeMap;
var ec = require("node-opcua-basic-types");
var encodeArray = ec.encodeArray;
var decodeArray = ec.decodeArray;
var makeExpandedNodeId = require("node-opcua-nodeid/src/expanded_nodeid").makeExpandedNodeId;
var generate_new_id = require("node-opcua-factory").generate_new_id;
var _enumerations = require("node-opcua-factory/src/factories_enumerations")._private._enumerations;
var schema = require("../schemas/ServerStatus_schema").ServerStatus_Schema;
var getFactory = require("node-opcua-factory/src/factories_factories").getFactory;
var BuildInfo = require("./_auto_generated_BuildInfo").BuildInfo;
var LocalizedText = getFactory("LocalizedText");
var BaseUAObject = require("node-opcua-factory/src/factories_baseobject").BaseUAObject;

/**
 * 
 * @class ServerStatus
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 * @param  [options.startTime] {UtcTime} 
 * @param  [options.currentTime] {UtcTime} 
 * @param  [options.state] {ServerState} 
 * @param  [options.buildInfo] {BuildInfo} 
 * @param  [options.secondsTillShutdown] {UInt32} 
 * @param  [options.shutdownReason] {LocalizedText} 
 */
function ServerStatus(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    var self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);
    if (options === null) { 
        BaseUAObject.call(this,options);
        self.buildInfo =  null; /* new BuildInfo(null); */
        self.shutdownReason =  null; /* new LocalizedText(null); */
        return ;
    }

    /**
      * 
      * @property startTime
      * @type {UtcTime}
      */
    self.startTime = initialize_field(schema.fields[0], options.startTime);

    /**
      * 
      * @property currentTime
      * @type {UtcTime}
      */
    self.currentTime = initialize_field(schema.fields[1], options.currentTime);

    /**
      * 
      * @property state
      * @type {ServerState}
      */
    self.setState(initialize_field(schema.fields[2], options.state));

    /**
      * 
      * @property buildInfo
      * @type {BuildInfo}
      */
    self.buildInfo =  new BuildInfo( options.buildInfo);

    /**
      * 
      * @property secondsTillShutdown
      * @type {UInt32}
      */
    self.secondsTillShutdown = initialize_field(schema.fields[4], options.secondsTillShutdown);

    /**
      * 
      * @property shutdownReason
      * @type {LocalizedText}
      */
    self.shutdownReason =  new LocalizedText( options.shutdownReason);

   // Object.preventExtensions(self);
}
util.inherits(ServerStatus,BaseUAObject);

//## Define Enumeration setters
ServerStatus.prototype.setState = function(value) {
   var coercedValue = _enumerations.ServerState.typedEnum.get(value);
   /* istanbul ignore next */
   if (coercedValue === undefined || coercedValue === null) {
      throw new Error("value cannot be coerced to ServerState: " + value);
   }
   this.state = coercedValue;
};
ServerStatus.prototype.encodingDefaultBinary = makeExpandedNodeId(864,0);
ServerStatus.prototype._schema = schema;

var encode_UtcTime = _defaultTypeMap.UtcTime.encode;
var decode_UtcTime = _defaultTypeMap.UtcTime.decode;
var encode_ServerState = _enumerations.ServerState.encode;
var decode_ServerState = _enumerations.ServerState.decode;
var encode_UInt32 = _defaultTypeMap.UInt32.encode;
var decode_UInt32 = _defaultTypeMap.UInt32.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
ServerStatus.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encode_UtcTime(this.startTime,stream);
    encode_UtcTime(this.currentTime,stream);
    encode_ServerState(this.state,stream);
   this.buildInfo.encode(stream,options);
    encode_UInt32(this.secondsTillShutdown,stream);
   this.shutdownReason.encode(stream,options);
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 * @param [option] {object} 
 */
ServerStatus.prototype.decode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream,options);
    this.startTime = decode_UtcTime(stream,options);
    this.currentTime = decode_UtcTime(stream,options);
    this.state = decode_ServerState(stream,options);
    this.buildInfo.decode(stream,options);
    this.secondsTillShutdown = decode_UInt32(stream,options);
    this.shutdownReason.decode(stream,options);
};
ServerStatus.possibleFields = [
  "startTime",
         "currentTime",
         "state",
         "buildInfo",
         "secondsTillShutdown",
         "shutdownReason"
];


exports.ServerStatus = ServerStatus;
var register_class_definition = require("node-opcua-factory/src/factories_factories").register_class_definition;
register_class_definition("ServerStatus",ServerStatus);
