// --------- This code has been automatically generated !!! 2018-02-08T07:25:25.142Z
"use strict";
/**
 * @module opcua.address_space.types
 */
var assert = require("node-opcua-assert");
var util = require("util");
var _  = require("underscore");
var makeNodeId = require("node-opcua-nodeid").makeNodeId;
var schema_helpers =  require("node-opcua-factory/src/factories_schema_helpers");
var extract_all_fields                       = schema_helpers.extract_all_fields;
var resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
var initialize_field                         = schema_helpers.initialize_field;
var initialize_field_array                   = schema_helpers.initialize_field_array;
var check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
var _defaultTypeMap = require("node-opcua-factory/src/factories_builtin_types")._defaultTypeMap;
var ec = require("node-opcua-basic-types");
var encodeArray = ec.encodeArray;
var decodeArray = ec.decodeArray;
var makeExpandedNodeId = require("node-opcua-nodeid/src/expanded_nodeid").makeExpandedNodeId;
var generate_new_id = require("node-opcua-factory").generate_new_id;
var _enumerations = require("node-opcua-factory/src/factories_enumerations")._private._enumerations;
var schema = require("../schemas/ApplicationInstanceCertificate_schema").ApplicationInstanceCertificate_Schema;
var getFactory = require("node-opcua-factory/src/factories_factories").getFactory;
var BaseUAObject = require("node-opcua-factory/src/factories_baseobject").BaseUAObject;

/**
 * 
 * @class ApplicationInstanceCertificate
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 * @param  [options.version] {String} 
 * @param  [options.serialNumber] {ByteString} 
 * @param  [options.signatureAlgorithm] {String} 
 * @param  [options.signature] {ByteString} 
 * @param  [options.issuer] {String} 
 * @param  [options.validFrom] {UtcTime} 
 * @param  [options.validTo] {UtcTime} 
 * @param  [options.subject] {String} 
 * @param  [options.applicationUri] {String} 
 * @param  [options.hostnames] {String[]} 
 * @param  [options.publicKey] {ByteString} 
 * @param  [options.keyUsage] {String} 
 */
function ApplicationInstanceCertificate(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (schema_helpers.doDebug) { check_options_correctness_against_schema(this,schema,options); }
    var self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);
    if (options === null) { 
        BaseUAObject.call(this,options);
        return ;
    }

    /**
      * 
      * @property version
      * @type {String}
      */
    self.version = initialize_field(schema.fields[0], options.version);

    /**
      * 
      * @property serialNumber
      * @type {ByteString}
      */
    self.serialNumber = initialize_field(schema.fields[1], options.serialNumber);

    /**
      * 
      * @property signatureAlgorithm
      * @type {String}
      */
    self.signatureAlgorithm = initialize_field(schema.fields[2], options.signatureAlgorithm);

    /**
      * 
      * @property signature
      * @type {ByteString}
      */
    self.signature = initialize_field(schema.fields[3], options.signature);

    /**
      * 
      * @property issuer
      * @type {String}
      */
    self.issuer = initialize_field(schema.fields[4], options.issuer);

    /**
      * 
      * @property validFrom
      * @type {UtcTime}
      */
    self.validFrom = initialize_field(schema.fields[5], options.validFrom);

    /**
      * 
      * @property validTo
      * @type {UtcTime}
      */
    self.validTo = initialize_field(schema.fields[6], options.validTo);

    /**
      * 
      * @property subject
      * @type {String}
      */
    self.subject = initialize_field(schema.fields[7], options.subject);

    /**
      * 
      * @property applicationUri
      * @type {String}
      */
    self.applicationUri = initialize_field(schema.fields[8], options.applicationUri);

    /**
      * 
      * @property hostnames
      * @type {String[]}
      */
    self.hostnames = initialize_field_array(schema.fields[9], options.hostnames);

    /**
      * 
      * @property publicKey
      * @type {ByteString}
      */
    self.publicKey = initialize_field(schema.fields[10], options.publicKey);

    /**
      * 
      * @property keyUsage
      * @type {String}
      */
    self.keyUsage = initialize_field(schema.fields[11], options.keyUsage);

   // Object.preventExtensions(self);
}
util.inherits(ApplicationInstanceCertificate,BaseUAObject);
schema.id = generate_new_id();
ApplicationInstanceCertificate.prototype.encodingDefaultBinary = makeExpandedNodeId(schema.id);
ApplicationInstanceCertificate.prototype._schema = schema;

var encode_String = _defaultTypeMap.String.encode;
var decode_String = _defaultTypeMap.String.decode;
var encode_ByteString = _defaultTypeMap.ByteString.encode;
var decode_ByteString = _defaultTypeMap.ByteString.decode;
var encode_UtcTime = _defaultTypeMap.UtcTime.encode;
var decode_UtcTime = _defaultTypeMap.UtcTime.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
ApplicationInstanceCertificate.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encode_String(this.version,stream);
    encode_ByteString(this.serialNumber,stream);
    encode_String(this.signatureAlgorithm,stream);
    encode_ByteString(this.signature,stream);
    encode_String(this.issuer,stream);
    encode_UtcTime(this.validFrom,stream);
    encode_UtcTime(this.validTo,stream);
    encode_String(this.subject,stream);
    encode_String(this.applicationUri,stream);
    encodeArray(this.hostnames, stream, encode_String);
    encode_ByteString(this.publicKey,stream);
    encode_String(this.keyUsage,stream);
};
/**
 * decode the object from a binary stream
 * @method decode
 *
 * @param stream {BinaryStream} 
 * @param [option] {object} 
 */
ApplicationInstanceCertificate.prototype.decode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream,options);
    this.version = decode_String(stream,options);
    this.serialNumber = decode_ByteString(stream,options);
    this.signatureAlgorithm = decode_String(stream,options);
    this.signature = decode_ByteString(stream,options);
    this.issuer = decode_String(stream,options);
    this.validFrom = decode_UtcTime(stream,options);
    this.validTo = decode_UtcTime(stream,options);
    this.subject = decode_String(stream,options);
    this.applicationUri = decode_String(stream,options);
    this.hostnames = decodeArray(stream, decode_String);
    this.publicKey = decode_ByteString(stream,options);
    this.keyUsage = decode_String(stream,options);
};
ApplicationInstanceCertificate.possibleFields = [
  "version",
         "serialNumber",
         "signatureAlgorithm",
         "signature",
         "issuer",
         "validFrom",
         "validTo",
         "subject",
         "applicationUri",
         "hostnames",
         "publicKey",
         "keyUsage"
];


exports.ApplicationInstanceCertificate = ApplicationInstanceCertificate;
var register_class_definition = require("node-opcua-factory/src/factories_factories").register_class_definition;
register_class_definition("ApplicationInstanceCertificate",ApplicationInstanceCertificate);
