{"version":3,"sources":["opcua-iiot-discovery.js"],"names":["module","exports","RED","install","require","nodes","registerType","config","OPCUAIIoTDiscovery","createNode","discoveryServer","coreDiscovery","core","nodeOPCUA","OPCUADiscoveryServer","node","status","fill","shape","text","start","internalDebugLog","on","msg","getDiscoveryUrls","discoveryUrls","send","done","shutdown"],"mappings":"AAQA,aAOAA,OAAOC,QAAU,SAAUC,GAA3BF,QAAOC,sBAAyBE,UAC9BC,IAAAA,EAAQA,QAAR,oCAqCAF,EAAIG,MAAMC,aAAa,uBAlCvB,SAA6BC,GAA7BL,EAAAG,MAASG,WAAAA,KAAoBD,GAC3BL,KAAIG,KAAMI,EAAAA,KAGV,IAAIC,EAAkB,IAAIC,EAAcC,KAAKC,UAAUC,qBAAqB,IAAxEJ,EAAAA,KAGJK,EAAKC,OAAO,CAACC,KAAM,OAAQC,MAAO,OAAQC,KAAM,QAEhDT,EAAgBU,MAAM,WAAtBV,EAAgBU,iBAAM,4BACpBT,EAAAA,OAAAA,CAAAA,KAAcU,QAAAA,MAAiB,MAAAF,KAAA,aAIjCJ,EAAKO,GAAG,QAAS,SAAUC,GAAV,OAAZD,IACHC,EAAIb,QAAAA,CACFa,cAAcb,EAAAc,oBAAA,GACZC,UAAAA,EAAef,WAAgBc,KAGlCT,EAAAW,KAAAH,KAIHR,EAAKO,GAAG,QAAS,SAAUK,GAAV,OAAZL,GACHZ,EAAIA,SAAoB,EAAM,WAC5BA,EAAgBkB,iBAAY,YAC1BjB,EAAcU","file":"../opcua-iiot-discovery.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018 - Klaus Landsdorf (http://bianco-royal.de/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * OPC UA node representation for Node-RED OPC UA IIoT nodes.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreDiscovery = require('./core/opcua-iiot-core-discovery')\n\n  function OPCUAIIoTDiscovery (config) {\n    RED.nodes.createNode(this, config)\n    this.name = config.name\n\n    let discoveryServer = new coreDiscovery.core.nodeOPCUA.OPCUADiscoveryServer({})\n    let node = this\n\n    node.status({fill: 'blue', shape: 'ring', text: 'new'})\n\n    discoveryServer.start(function () {\n      coreDiscovery.internalDebugLog('discovery server started')\n      node.status({fill: 'green', shape: 'dot', text: 'active'})\n    })\n\n    node.on('input', function (msg) {\n      if (discoveryServer !== null) {\n        msg.payload = {\n          discoveryUrls: discoveryServer.getDiscoveryUrls() || [],\n          endpoints: discoveryServer.endpoints || []\n        }\n      }\n      node.send(msg)\n    })\n\n    node.on('close', function (done) {\n      if (discoveryServer !== null) {\n        discoveryServer.shutdown(1, function () {\n          coreDiscovery.internalDebugLog('shutdown')\n          discoveryServer = null\n        })\n      }\n    })\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Discovery', OPCUAIIoTDiscovery)\n}\n"]}