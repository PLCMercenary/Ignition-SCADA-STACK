{"version":3,"sources":["opcua-iiot-server-aso.js"],"names":["module","exports","RED","install","require","nodes","registerType","config","OPCUAIIoTASO","createNode","nodeId","this","browsename","displayname","objecttype","referencetype","referenceNodeId","datatype","value","node","on","msg","nodetype","topic","payload","includes","core","nodeOPCUA","OBJECTS_ROOT","Organizes","internalDebugLog","JSON","stringify","error","Error"],"mappings":"AAOA,aAOAA,OAAOC,QAAU,SAAUC,GAA3BF,QAAOC,sBAAyBE,UAC9BC,IAAAA,EAAQA,QAAA,0BA+CRF,EAAIG,MAAMC,aAAa,wBA5CvB,SAAuBC,GAAvBL,EAAAG,MAASG,WAAcD,KAAvBA,GACEL,KAAIG,OAAMI,EAAWC,OACrBC,KAAKD,WAASH,EAAOG,WACrBC,KAAKC,YAAaL,EAAOK,YACzBD,KAAKE,WAALN,EAAmBA,WACnBI,KAAKG,cAAaP,EAAOO,cACzBH,KAAKI,gBAAgBR,EAAOQ,gBAC5BJ,KAAKK,SAAAA,EAAkBT,SACvBI,KAAKM,MAALV,EAAgBA,MAChBI,KAAKO,KAALX,EAAaA,KAGb,IAAIY,EAAOR,KAEXQ,EAAKC,GAAG,QAAS,SAAUC,GAAV,WAAZD,EAAGE,WACNH,EAAIE,OAAAA,EAAAE,OAAJJ,EAA+BT,OAC7BS,EAAKT,SAASW,EAAIE,UAAcb,EAAAA,SAChCS,EAAKF,MAALI,EAAgBA,SAAAF,EAAgBA,OAIlCE,EAAM,CAACG,QAAS,GAAhBH,MAAOG,2BAADH,SACM,OAGRF,EAAKT,OAAOe,SAAS,OAASN,EAAKT,OAAOe,SAAS,OAASN,EAAKT,OAAOe,SAAS,OAArFJ,EAAIF,QAAKT,OAAOe,EAASf,OACvBW,EAAIG,QAAQd,WAASS,EAAKT,WAC1BW,EAAIG,QAAQZ,YAAaO,EAAKP,YAC9BS,EAAIG,QAAQX,WAAZM,EAA0BA,WAC1BE,EAAIG,QAAQV,SAAZK,EAAyBA,SACzBE,EAAIG,QAAQP,MAAZE,EAAuBA,MAGvBE,EAAIG,QAAQR,gBAAkBG,EAAKH,iBAAmBU,EAAKC,UAAUC,aAArEP,EAAIG,QAAQR,cAAZG,EAA8BA,eAAAO,EAAwBA,UAAKC,iBAA3DE,UAGAH,EAAKI,iBAAiB,yBAA2BC,KAAKC,UAAUX,IAAhEK,EAAKI,KAAAA,IAXPX,EAaOc,MAAA,IAAAC,MAAA,2BAAAb","file":"../opcua-iiot-server-aso.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2017,2018 - Klaus Landsdorf (http://bianco-royal.de/)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * Address space object Node-RED node.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let core = require('./core/opcua-iiot-core')\n\n  function OPCUAIIoTASO (config) {\n    RED.nodes.createNode(this, config)\n    this.nodeId = config.nodeId\n    this.browsename = config.browsename\n    this.displayname = config.displayname\n    this.objecttype = config.objecttype\n    this.referencetype = config.referencetype\n    this.referenceNodeId = config.referenceNodeId\n    this.datatype = config.datatype\n    this.value = config.value\n    this.name = config.name\n\n    let node = this\n\n    node.on('input', function (msg) {\n      if (msg.nodetype === 'inject') {\n        node.nodeId = msg.topic || node.nodeId\n        node.datatype = msg.datatype || node.datatype\n        node.value = msg.payload || node.value\n      }\n\n      msg = {payload: {}} // clean message\n      msg.topic = 'ServerAddressSpaceObject'\n      msg.nodetype = 'ASO'\n\n      if (node.nodeId.includes('i=') || node.nodeId.includes('s=') || node.nodeId.includes('b=')) {\n        msg.payload.nodeId = node.nodeId\n        msg.payload.browsename = node.browsename\n        msg.payload.displayname = node.displayname\n        msg.payload.objecttype = node.objecttype\n        msg.payload.datatype = node.datatype\n        msg.payload.value = node.value\n\n        msg.payload.referenceNodeId = node.referenceNodeId || core.nodeOPCUA.OBJECTS_ROOT\n        msg.payload.referencetype = node.referencetype || core.nodeOPCUA.ReferenceTypeIds.Organizes\n\n        core.internalDebugLog('node msg stringified: ' + JSON.stringify(msg))\n        node.send(msg)\n      } else {\n        node.error(new Error('ASO NodeId Is Not Valid'), msg)\n      }\n    })\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Server-ASO', OPCUAIIoTASO)\n}\n"]}