{"version":3,"sources":["opcua-iiot-connector.js"],"names":["module","exports","RED","install","require","coreConnector","path","nodes","registerType","config","createNode","this","discoveryUrl","endpoint","endpointMustExist","keepSessionAlive","loginEnabled","name","showErrors","securityPolicy","messageSecurityMode","securityMode","publicCertificateFile","privateKeyFile","defaultSecureTokenLifetime","autoSelectRightEndpoint","strategyMaxRetry","strategyInitialDelay","strategyMaxDelay","strategyRandomisationFactor","node","setMaxListeners","client","sessionConnectRetries","endpoints","userIdentity","opcuaClient","opcuaSession","discoveryServer","serverCertificate","discoveryServerEndpointUrl","sessionNotInRenewMode","createStatelyMachine","stateMachine","init","sessionStartTimeout","core","getNodeOPCUAClientPath","securedCommunication","detailDebugLog","toString","join","nodeOPCUAClientPath","opcuaClientOptions","certificateFile","endpoint_must_exist","requestedSessionTimeout","connectionStrategy","maxRetry","initialDelay","maxDelay","credentials","user","userName","internalDebugLog","error","Error","payload","connectOPCUAEndpoint","JSON","stringify","settings","verbose","bgWhite","yellow","on","err","red","emit","close","lock","number","delay","orange","blue","violet","green","setSessionToRenewMode","startSession","unlock","connectToClient","handleError","renewConnection","autoSelectEndpointFromConnection","nodeOPCUA","OPCUAClient","discoverClient","connect","getEndpointsRequest","forEach","i","endpointUrl","securityPolicyUri","key","split","catch","message","callerInfo","sessionId","getMachineState","createSession","then","session","open","statusCode","handleSessionClose","logSessionInformation","authenticationToken","timeout","serverNonce","serverSignature","lastRequestSentTime","Date","toISOString","lastResponseReceivedTime","resetBadSession","resetSessionRenewMode","renewSession","clearTimeout","setTimeout","CONNECTION_START_DELAY","RECONNECT_DELAY","OPCUAIIoTConnectorConfiguration","done","closeSession","end","disconnect","password","type","req","res","getNode","params","id","decodeURIComponent","discoverUrlRequest","includes","json","perform_findServersRequest","discoveryUrls","performFindServersRequest","servers","httpAdmin","get","auth","needsPermission","endpointUrlRequest","discoveryClient","_","toArray","invert","DataTypeIds","AttributeIds","StatusCodes","ObjectTypeIds","VariableTypeIds","ReferenceTypeIds","xmlset","push","di_nodeset_filename","adi_nodeset_filename","typeList","typelistEntry","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","invertedTypeList","Symbol","iterator","next","value","nodeId","return","resultTypeList","objectTypeIds","invertedObjectTypeIds","eventTypes","filter","objectTypeId","indexOf","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","eventTypesResults","label","variabletypeList","invertedVariableTypeList","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6"],"mappings":"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","file":"../opcua-iiot-connector.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018 - Klaus Landsdorf (http://bianco-royal.de/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * OPC UA connector Node-RED config node.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreConnector = require('./core/opcua-iiot-core-connector')\n  let path = require('path')\n  const _ = require('underscore')\n\n  function OPCUAIIoTConnectorConfiguration (config) {\n    const CONNECTION_START_DELAY = 2000 // msec.\n    const RECONNECT_DELAY = 500 // msec.\n    const UNLIMITED_LISTENERS = 0\n\n    RED.nodes.createNode(this, config)\n    this.discoveryUrl = config.discoveryUrl || null\n    this.endpoint = config.endpoint\n    this.endpointMustExist = config.endpointMustExist || false\n    this.keepSessionAlive = config.keepSessionAlive\n    this.loginEnabled = config.loginEnabled\n    this.name = config.name\n    this.showErrors = config.showErrors\n    this.securityPolicy = config.securityPolicy\n    this.messageSecurityMode = config.securityMode\n    this.publicCertificateFile = config.publicCertificateFile\n    this.privateKeyFile = config.privateKeyFile\n    this.defaultSecureTokenLifetime = config.defaultSecureTokenLifetime || 60000\n    this.autoSelectRightEndpoint = config.autoSelectRightEndpoint\n    this.strategyMaxRetry = config.strategyMaxRetry || 200\n    this.strategyInitialDelay = config.strategyInitialDelay || 1000\n    this.strategyMaxDelay = config.strategyMaxDelay || 30000\n    this.strategyRandomisationFactor = config.strategyRandomisationFactor || 0.2\n    this.requestedSessionTimeout = config.requestedSessionTimeout || 60000\n\n    let node = this\n    node.setMaxListeners(UNLIMITED_LISTENERS)\n    node.client = null\n    node.sessionConnectRetries = 0\n    node.endpoints = []\n    node.userIdentity = null\n    node.opcuaClient = null\n    node.opcuaSession = null\n    node.discoveryServer = null\n    node.serverCertificate = null\n    node.discoveryServerEndpointUrl = null\n    node.sessionNotInRenewMode = true\n    node.stateMachine = coreConnector.createStatelyMachine()\n    node.stateMachine.init()\n\n    let sessionStartTimeout = null\n    let nodeOPCUAClientPath = coreConnector.core.getNodeOPCUAClientPath()\n\n    node.securedCommunication = (node.securityPolicy && node.securityPolicy !== 'None' && node.messageSecurityMode && node.messageSecurityMode !== 'NONE')\n\n    coreConnector.detailDebugLog('config: ' + node.publicCertificateFile)\n    coreConnector.detailDebugLog('config: ' + node.privateKeyFile)\n    coreConnector.detailDebugLog('securedCommunication: ' + node.securedCommunication.toString())\n\n    if (node.securedCommunication) {\n      if (node.publicCertificateFile === null || node.publicCertificateFile === '') {\n        node.publicCertificateFile = path.join(nodeOPCUAClientPath, '/certificates/client_selfsigned_cert_1024.pem')\n        coreConnector.detailDebugLog('default key: ' + node.publicCertificateFile)\n      }\n\n      if (node.privateKeyFile === null || node.privateKeyFile === '') {\n        node.privateKeyFile = path.join(nodeOPCUAClientPath, '/certificates/PKI/own/private/private_key.pem')\n        coreConnector.detailDebugLog('default key: ' + node.privateKeyFile)\n      }\n    } else {\n      node.publicCertificateFile = null\n      node.privateKeyFile = null\n    }\n\n    node.opcuaClientOptions = {\n      securityPolicy: node.securityPolicy || 'None',\n      securityMode: node.messageSecurityMode || 'NONE',\n      defaultSecureTokenLifetime: node.defaultSecureTokenLifetime,\n      keepSessionAlive: node.keepSessionAlive,\n      certificateFile: node.publicCertificateFile,\n      privateKeyFile: node.privateKeyFile,\n      endpoint_must_exist: node.endpointMustExist,\n      requestedSessionTimeout: node.requestedSessionTimeout,\n      connectionStrategy: {\n        maxRetry: node.strategyMaxRetry,\n        initialDelay: node.strategyInitialDelay,\n        maxDelay: node.strategyMaxDelay,\n        randomisationFactor: node.strategyRandomisationFactor\n      }\n    }\n\n    if (node.loginEnabled) {\n      if (node.credentials) {\n        node.userIdentity = {\n          userName: node.credentials.user,\n          password: node.credentials.password\n        }\n        coreConnector.internalDebugLog('Connecting With Login Data On ' + node.endpoint)\n      } else {\n        node.error(new Error('Login Enabled But No Credentials'), {payload: ''})\n      }\n    }\n\n    node.connectOPCUAEndpoint = function () {\n      coreConnector.internalDebugLog('Connecting On ' + node.endpoint)\n      coreConnector.detailDebugLog('Options ' + JSON.stringify(node.opcuaClientOptions))\n      node.opcuaClient = new coreConnector.core.nodeOPCUA.OPCUAClient(node.opcuaClientOptions)\n\n      if (node.autoSelectRightEndpoint) {\n        node.autoSelectEndpointFromConnection()\n      }\n\n      if (RED.settings.verbose) {\n        coreConnector.internalDebugLog('!!!!!!!!!!!!!!!!!!!!!!!!!  CLIENT INFORMATION !!!!!!!!!!!!!!!!!!!!!!!!!'.bgWhite.yellow)\n        coreConnector.internalDebugLog('Client Information: ' + node.opcuaClient.toString())\n      }\n\n      node.opcuaClient.on('close', function (err) {\n        if (err) {\n          coreConnector.internalDebugLog('Connection Error On Close ' + err)\n        }\n        coreConnector.internalDebugLog('!!!!!!!!!!!!!!!!!!!!!!!!  CLIENT CONNECTION CLOSED !!!!!!!!!!!!!!!!!!!'.bgWhite.red)\n        coreConnector.internalDebugLog('CONNECTION CLOSED: ' + node.endpoint)\n        node.emit('server_connection_close')\n        node.stateMachine.close().lock()\n      })\n\n      node.opcuaClient.on('backoff', function (number, delay) {\n        coreConnector.internalDebugLog('!!! CONNECTION FAILED FOR #'.bgWhite.yellow, number, ' retrying ', delay / 1000.0, ' sec. !!!')\n        coreConnector.internalDebugLog('CONNECTION FAILED: ' + node.endpoint)\n      })\n\n      node.opcuaClient.on('connection_reestablished', function () {\n        coreConnector.internalDebugLog('!!!!!!!!!!!!!!!!!!!!!!!!  CLIENT CONNECTION RE-ESTABLISHED !!!!!!!!!!!!!!!!!!!'.bgWhite.orange)\n        coreConnector.internalDebugLog('CONNECTION RE-ESTABLISHED: ' + node.endpoint)\n        node.stateMachine.unlock().open()\n      })\n\n      node.opcuaClient.on('start_reconnection', function () {\n        coreConnector.internalDebugLog('!!!!!!!!!!!!!!!!!!!!!!!!  CLIENT STARTING RECONNECTION !!!!!!!!!!!!!!!!!!!'.bgWhite.yellow)\n        coreConnector.internalDebugLog('CONNECTION STARTING RECONNECTION: ' + node.endpoint)\n        node.stateMachine.lock()\n      })\n\n      node.opcuaClient.on('timed_out_request', function () {\n        coreConnector.internalDebugLog('!!!!!!!!!!!!!!!!!!!!!!!! CLIENT TIMED OUT REQUEST !!!!!!!!!!!!!!!!!!!'.bgWhite.blue)\n        coreConnector.internalDebugLog('CONNECTION TIMED OUT REQUEST: ' + node.endpoint)\n      })\n\n      if (RED.settings.verbose) {\n        node.opcuaClient.on('security_token_renewed', function () {\n          coreConnector.internalDebugLog('!!!!!!!!!!!!!!!!!!!!!!!! CLIENT SECURITY TOKEN RENEWED !!!!!!!!!!!!!!!!!!!'.bgWhite.violet)\n          coreConnector.internalDebugLog('CONNECTION SECURITY TOKEN RENEWE: ' + node.endpoint)\n        })\n\n        node.opcuaClient.on('timed_out_request', function () {\n          coreConnector.internalDebugLog('!!!!!!!!!!!!!!!!!!!!!!!! CLIENT REQUEST TIMEOUT !!!!!!!!!!!!!!!!!!!'.bgWhite.red)\n          coreConnector.internalDebugLog('CLIENT REQUEST TIMEOUT: ' + node.endpoint)\n        })\n      }\n\n      node.opcuaClient.on('after_reconnection', function () {\n        coreConnector.internalDebugLog('!!!!!!!!!!!!!!!!!!!!!!!!      CLIENT RECONNECTED     !!!!!!!!!!!!!!!!!!!'.bgWhite.green)\n        coreConnector.internalDebugLog('CONNECTION RECONNECTED: ' + node.endpoint)\n        node.emit('after_reconnection', node.opcuaClient)\n        node.setSessionToRenewMode()\n        node.startSession('after_reconnection')\n        node.stateMachine.unlock().init()\n      })\n\n      node.connectToClient()\n    }\n\n    node.connectToClient = function () {\n      node.opcuaClient.connect(node.endpoint, function (err) {\n        if (err) {\n          coreConnector.internalDebugLog('Client Error: ' + err)\n          if (node.showErrors) {\n            node.error(err, {payload: 'Client Connect Error'})\n          }\n          node.handleError(err)\n        } else {\n          coreConnector.internalDebugLog('Client Connected On ' + node.endpoint)\n          coreConnector.internalDebugLog('Client Options ' + JSON.stringify(node.opcuaClientOptions))\n          node.emit('connected', node.opcuaClient)\n          node.opcuaSession = null\n          node.stateMachine.init()\n          node.startSession('on connect')\n        }\n      })\n    }\n\n    node.renewConnection = function () {\n      node.opcuaClient.disconnect(function (err) {\n        if (err) {\n          coreConnector.internalDebugLog('Disconnected With Error ' + err + ' From ' + node.endpoint)\n          if (node.showErrors) {\n            node.error(err, {payload: 'Error On Close Connector For Renew'})\n          }\n        } else {\n          coreConnector.internalDebugLog('Disconnected From ' + node.endpoint)\n        }\n        node.connectToClient()\n      })\n    }\n\n    node.autoSelectEndpointFromConnection = function () {\n      coreConnector.internalDebugLog('Auto Searching For Endpoint On ' + node.endpoint)\n\n      let endpointMustExist = node.opcuaClientOptions.endpoint_must_exist\n      node.opcuaClientOptions.endpoint_must_exist = false\n      let discoverClient = new coreConnector.core.nodeOPCUA.OPCUAClient(node.opcuaClientOptions)\n      discoverClient.connect(node.endpoint).then(function () {\n        coreConnector.internalDebugLog('Auto Searching Endpoint Connected To ' + node.endpoint)\n\n        discoverClient.getEndpointsRequest(function (err, endpoints) {\n          if (err) {\n            coreConnector.internalDebugLog('Auto Switch To Endpoint Error ' + err)\n            if (node.showErrors) {\n              node.error(err, {payload: 'Get Endpoints Request Error'})\n            }\n          } else {\n            endpoints.forEach(function (endpoint, i) {\n              coreConnector.internalDebugLog('Auto Endpoint ' + endpoint.endpointUrl.toString() + ' ' + endpoint.securityPolicyUri.toString())\n              let securityMode = endpoint.securityMode.key || endpoint.securityMode\n              let securityPolicy = (endpoint.securityPolicyUri.includes('SecurityPolicy#')) ? endpoint.securityPolicyUri.split('#')[1] : endpoint.securityPolicyUri\n\n              coreConnector.internalDebugLog('node-mode:' + node.messageSecurityMode + ' securityMode: ' + securityMode)\n              coreConnector.internalDebugLog('node-policy:' + node.securityPolicy + ' securityPolicy: ' + securityPolicy)\n\n              if (securityMode === node.messageSecurityMode && securityPolicy === node.securityPolicy) {\n                node.endpoint = endpoint.endpointUrl\n                coreConnector.internalDebugLog('Auto Switch To Endpoint ' + node.endpoint)\n              }\n            })\n          }\n          node.opcuaClientOptions.endpoint_must_exist = endpointMustExist\n          discoverClient.disconnect(function (err) {\n            if (err) {\n              coreConnector.internalDebugLog('Endpoints Auto Request Error ' + err)\n              if (node.showErrors) {\n                node.error(err, {payload: 'Discover Client Disconnect Error'})\n              }\n            } else {\n              coreConnector.internalDebugLog('Endpoints Auto Request Done With Endpoint ' + node.endpoint)\n            }\n          })\n        })\n      }).catch(function (err) {\n        coreConnector.internalDebugLog('Get Auto Endpoint Request Error ' + err.message)\n        node.opcuaClientOptions.endpoint_must_exist = endpointMustExist\n      })\n    }\n\n    node.startSession = function (callerInfo) {\n      coreConnector.internalDebugLog('Request For New Session From ' + callerInfo)\n\n      if (node.sessionNotInRenewMode) {\n        coreConnector.internalDebugLog('Start New Session')\n      } else {\n        if (node.opcuaSession && node.opcuaSession.sessionId !== 'terminated') {\n          coreConnector.internalDebugLog('Working Session On Start Request')\n          return\n        }\n      }\n\n      if (node.stateMachine.getMachineState() === 'END') {\n        coreConnector.internalDebugLog('State Is End While Try To Reconnect')\n        return\n      }\n\n      if (node.opcuaClient) {\n        node.opcuaSession = null\n        node.opcuaClient.createSession(node.userIdentity || {}).then(function (session) {\n          coreConnector.internalDebugLog('Session Created On ' + node.endpoint + ' For ' + callerInfo)\n          node.stateMachine.open()\n          node.opcuaSession = session\n\n          if (RED.settings.verbose) {\n            coreConnector.internalDebugLog('!!!!!!!!!!!!!!!!!!!!!    CLIENT SESSION INFORMATION   !!!!!!!!!!!!!!!!!!'.bgWhite.yellow)\n            node.logSessionInformation(node.opcuaSession)\n          }\n\n          node.opcuaSession.on('session_closed', function (statusCode) {\n            coreConnector.internalDebugLog('Session Closed With StatusCode ' + statusCode)\n\n            if (RED.settings.verbose) {\n              coreConnector.internalDebugLog('!!!!!!!!!!!!!!!!!!!!!    CLIENT SESSION CLOSED   !!!!!!!!!!!!!!!!!!'.bgWhite.yellow)\n              node.logSessionInformation(node.opcuaSession)\n            }\n\n            node.handleSessionClose()\n          })\n\n          node.emit('session_started', node.opcuaSession)\n          node.sessionConnectRetries = 0\n        }).catch(function (err) {\n          coreConnector.internalDebugLog('Create Session ' + err)\n          if (node.showErrors) {\n            node.error(err, {payload: 'Create Session Error'})\n          }\n          node.opcuaSession = null\n          node.renewConnection('Renew Session From Catch Session Create')\n        })\n      } else {\n        coreConnector.internalDebugLog('OPC UA Client Is Not Valid')\n        node.connectOPCUAEndpoint()\n      }\n    }\n\n    node.logSessionInformation = function (session) {\n      if (!node.opcuaSession) {\n        coreConnector.internalDebugLog('Session Not Valid To Log Information')\n        if (node.showErrors) {\n          node.error(new Error('Session Not Valid To Log Information'), {payload: 'No Session Information'})\n        }\n        return\n      }\n      coreConnector.internalDebugLog('Session ' + session.name + ' Id: ' + session.sessionId + ' Started On ' + node.endpoint)\n      coreConnector.detailDebugLog('name :' + session.name)\n      coreConnector.detailDebugLog('sessionId :' + session.sessionId)\n      coreConnector.detailDebugLog('authenticationToken :' + session.authenticationToken)\n      coreConnector.internalDebugLog('timeout :' + session.timeout)\n\n      if (session.serverNonce) {\n        coreConnector.detailDebugLog('serverNonce :' + session.serverNonce ? session.serverNonce.toString('hex') : 'none')\n      }\n\n      if (session.serverCertificate) {\n        coreConnector.detailDebugLog('serverCertificate :' + session.serverCertificate ? session.serverCertificate.toString('base64') : 'none')\n      } else {\n        coreConnector.detailDebugLog('serverCertificate : None'.red)\n      }\n\n      coreConnector.detailDebugLog('serverSignature :' + session.serverSignature ? session.serverSignature : 'none')\n\n      if (session.lastRequestSentTime) {\n        coreConnector.detailDebugLog('lastRequestSentTime : ' + session.lastRequestSentTime)\n        coreConnector.internalDebugLog('lastRequestSentTime converted :' + session.lastRequestSentTime ? new Date(session.lastRequestSentTime).toISOString() : 'none')\n      }\n\n      if (session.lastResponseReceivedTime) {\n        coreConnector.detailDebugLog('lastResponseReceivedTime : ' + session.lastResponseReceivedTime)\n        coreConnector.internalDebugLog('lastResponseReceivedTime converted :' + session.lastResponseReceivedTime ? new Date(session.lastResponseReceivedTime).toISOString() : 'none')\n      }\n    }\n\n    node.resetBadSession = function () {\n      node.resetSessionRenewMode()\n      coreConnector.internalDebugLog('Reset Bad Session Connect Retries:' + node.sessionConnectRetries)\n      node.sessionConnectRetries += 1\n\n      if (RED.settings.verbose) {\n        coreConnector.internalDebugLog('!!!!!!!!!!!!!!!!!!!!!   BAD SESSION CLOSE BY CONNECTOR   !!!!!!!!!!!!!!!!!!'.bgWhite.yellow)\n        node.logSessionInformation(node.opcuaSession)\n      }\n\n      node.renewSession('Renew From BadSession')\n    }\n\n    node.renewSession = function (callerInfo) {\n      if (node.opcuaSession && node.opcuaSession.sessionId !== 'terminated') {\n        node.opcuaClient.closeSession(node.opcuaSession, false, function (err) {\n          if (err) {\n            coreConnector.internalDebugLog('Client Bad Session Close ' + err)\n            if (node.showErrors) {\n              node.error(err, {payload: 'Client Bad Session Close Error'})\n            }\n          }\n          if (sessionStartTimeout) {\n            clearTimeout(sessionStartTimeout)\n            sessionStartTimeout = null\n          }\n          sessionStartTimeout = setTimeout(() => { node.startSession('Renew Session After Close') }, RECONNECT_DELAY)\n        })\n      } else {\n        if (sessionStartTimeout) {\n          clearTimeout(sessionStartTimeout)\n          sessionStartTimeout = null\n        }\n        sessionStartTimeout = setTimeout(() => { node.startSession('Renew Session') }, RECONNECT_DELAY)\n      }\n    }\n\n    node.setSessionToRenewMode = function () {\n      node.stateMachine.unlock().init()\n      node.sessionNotInRenewMode = false\n    }\n\n    node.resetSessionRenewMode = function () {\n      node.stateMachine.close().lock()\n      node.sessionNotInRenewMode = true\n    }\n\n    node.handleError = function (err) {\n      coreConnector.internalDebugLog('Handle Error On ' + node.endpoint + ' err:' + err)\n      if (node.showErrors) {\n        node.error(err, {payload: 'Handle Connector Error'})\n      }\n    }\n\n    node.handleSessionClose = function (err) {\n      node.stateMachine.close().lock()\n      if (err) {\n        coreConnector.internalDebugLog('Session Closed With Error ' + err)\n        if (node.showErrors) {\n          node.error(err, {payload: 'Session Closed'})\n        }\n      } else {\n        coreConnector.internalDebugLog('Session Closed')\n      }\n\n      node.resetSessionRenewMode()\n      if (sessionStartTimeout) {\n        clearTimeout(sessionStartTimeout)\n        sessionStartTimeout = null\n      }\n      sessionStartTimeout = setTimeout(() => { node.startSession('Handle Session Close') }, RECONNECT_DELAY)\n    }\n\n    try {\n      setTimeout(node.connectOPCUAEndpoint, CONNECTION_START_DELAY)\n    } catch (err) {\n      coreConnector.internalDebugLog('Connect OPC UA Endpoint ' + err)\n      if (node.showErrors) {\n        node.error(err, {payload: 'Connect OPC UA Endpoint Error'})\n      }\n    }\n\n    node.on('close', function (done) {\n      node.stateMachine.end()\n      if (node.opcuaClient) {\n        if (node.opcuaSession) {\n          coreConnector.internalDebugLog('Close Node Try To Close Session For ' + node.endpoint)\n\n          node.opcuaClient.closeSession(node.opcuaSession, true, function () {\n            coreConnector.internalDebugLog('Close Node Session Closed For ' + node.endpoint)\n            coreConnector.internalDebugLog('Close Node Disconnecting Client ' + node.endpoint)\n\n            node.opcuaClient.disconnect(function (err) {\n              if (err) {\n                coreConnector.internalDebugLog('Close Node Client Disconnected With Error ' + err + ' On ' + node.endpoint)\n                if (node.showErrors) {\n                  node.error(err, {payload: 'Session Close Error On Close Connector'})\n                }\n              } else {\n                coreConnector.internalDebugLog('Close Node Client Disconnected From ' + node.endpoint)\n              }\n              done()\n              coreConnector.internalDebugLog('Close Node Done For Connector On ' + node.endpoint)\n            })\n          }).catch(function (err) {\n            if (err) {\n              coreConnector.internalDebugLog('Close Node With Session Close Error ' + err + ' On ' + node.endpoint)\n              if (node.showErrors) {\n                node.error(err, {payload: 'Session Close Crash On Close Connector'})\n              }\n            }\n\n            coreConnector.internalDebugLog('Close Node Disconnecting Client On Crashed Session Close On ' + node.endpoint)\n            node.opcuaClient.disconnect(function (err) {\n              if (err) {\n                coreConnector.internalDebugLog('Close Node With Client Close Error On Crashed Session Close ' + err + ' On ' + node.endpoint)\n                if (node.showErrors) {\n                  node.error(err, {payload: 'Client Close Error On Close Connector'})\n                }\n              } else {\n                coreConnector.internalDebugLog('Close Node Client Disconnected On Crashed Session Close On ' + node.endpoint)\n              }\n              done()\n              coreConnector.internalDebugLog('Close Node Done For Connector With Crashed Session Close On ' + node.endpoint)\n            })\n          })\n        } else {\n          coreConnector.internalDebugLog('Close Node Disconnect Connector From ' + node.endpoint)\n          node.opcuaClient.disconnect(function (err) {\n            if (err) {\n              coreConnector.internalDebugLog('Close Node Disconnected Connector From ' + node.endpoint + ' with Error ' + err)\n              if (node.showErrors) {\n                node.error(err, {payload: 'Client Close Error On Close Connector'})\n              }\n            } else {\n              coreConnector.internalDebugLog('Close Node Disconnected Connector From ' + node.endpoint)\n            }\n            done()\n            coreConnector.internalDebugLog('Close Node Done For Connector On ' + node.endpoint)\n          })\n        }\n      } else {\n        done()\n        coreConnector.internalDebugLog('Close Node Done For Connector Without Client On ' + node.endpoint)\n      }\n    })\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Connector', OPCUAIIoTConnectorConfiguration, {\n    credentials: {\n      user: {type: 'text'},\n      password: {type: 'password'}\n    }\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/client/discover/:id/:discoveryUrl', RED.auth.needsPermission('opcua.discovery'), function (req, res) {\n    let node = RED.nodes.getNode(req.params.id)\n    let discoverUrlRequest = decodeURIComponent(req.params.discoveryUrl)\n    coreConnector.internalDebugLog('Get Discovery Request ' + JSON.stringify(req.params) + ' for ' + discoverUrlRequest)\n    if (node) {\n      if (discoverUrlRequest && !discoverUrlRequest.includes('opc.tcp://')) {\n        res.json([])\n      } else {\n        let performFindServersRequest = coreConnector.core.nodeOPCUA.perform_findServersRequest\n        performFindServersRequest(discoverUrlRequest, function (err, servers) {\n          if (!err) {\n            let endpoints = []\n            servers.forEach(function (server) {\n              server.discoveryUrls.forEach(function (discoveryUrl) {\n                if (discoveryUrl.toString() !== discoverUrlRequest) {\n                  endpoints.push(discoveryUrl.toString())\n                }\n              })\n            })\n            res.json(endpoints)\n          } else {\n            coreConnector.internalDebugLog('Perform Find Servers Request ' + err)\n            if (node.showErrors) {\n              node.error(err, {payload: ''})\n            }\n            res.json([])\n          }\n        })\n      }\n    } else {\n      coreConnector.internalDebugLog('Get Discovery Request None Node ' + JSON.stringify(req.params))\n      res.json([])\n    }\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/client/endpoints/:id/:endpointUrl', RED.auth.needsPermission('opcua.endpoints'), function (req, res) {\n    let node = RED.nodes.getNode(req.params.id)\n    let endpointUrlRequest = decodeURIComponent(req.params.endpointUrl)\n    coreConnector.internalDebugLog('Get Endpoints Request ' + JSON.stringify(req.params) + ' for ' + endpointUrlRequest)\n    if (node) {\n      if (endpointUrlRequest && !endpointUrlRequest.includes('opc.tcp://')) {\n        res.json([])\n      } else {\n        node.opcuaClientOptions.endpoint_must_exist = false\n        let discoveryClient = new coreConnector.core.nodeOPCUA.OPCUAClient(node.opcuaClientOptions)\n        discoveryClient.connect(endpointUrlRequest).then(function () {\n          coreConnector.internalDebugLog('Get Endpoints Connected For Request')\n          discoveryClient.getEndpointsRequest(function (err, endpoints) {\n            if (err) {\n              if (node.showErrors) {\n                node.error(err, {payload: ''})\n              }\n              coreConnector.internalDebugLog('Get Endpoints Request Error ' + err)\n              res.json([])\n            } else {\n              coreConnector.internalDebugLog('Sending Endpoints For Request')\n              res.json(endpoints)\n            }\n            discoveryClient.disconnect(function () {\n              coreConnector.internalDebugLog('Get Endpoints Request Disconnect')\n            })\n            node.opcuaClientOptions.endpoint_must_exist = endpointMustExist\n          })\n        }).catch(function (err) {\n          node.opcuaClientOptions.endpoint_must_exist = endpointMustExist\n          coreConnector.internalDebugLog('Get Endpoints Request Error ' + err.message)\n          res.json([])\n        })\n        let endpointMustExist = node.opcuaClientOptions.endpoint_must_exist\n      }\n    } else {\n      coreConnector.internalDebugLog('Get Endpoints Request None Node ' + JSON.stringify(req.params))\n      res.json([])\n    }\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/plain/DataTypeIds', RED.auth.needsPermission('opcuaIIoT.plain.datatypes'), function (req, res) {\n    res.json(_.toArray(_.invert(coreConnector.core.nodeOPCUA.DataTypeIds)))\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/plain/AttributeIds', RED.auth.needsPermission('opcuaIIoT.plain.attributeids'), function (req, res) {\n    res.json(_.toArray(_.invert(coreConnector.core.nodeOPCUA.AttributeIds)))\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/plain/StatusCodes', RED.auth.needsPermission('opcuaIIoT.plain.statuscodes'), function (req, res) {\n    res.json(_.toArray(_.invert(coreConnector.core.nodeOPCUA.StatusCodes)))\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/plain/ObjectTypeIds', RED.auth.needsPermission('opcuaIIoT.plain.objecttypeids'), function (req, res) {\n    res.json(coreConnector.core.nodeOPCUA.ObjectTypeIds)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/plain/VariableTypeIds', RED.auth.needsPermission('opcuaIIoT.plain.variabletypeids'), function (req, res) {\n    res.json(coreConnector.core.nodeOPCUA.VariableTypeIds)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/plain/ReferenceTypeIds', RED.auth.needsPermission('opcuaIIoT.plain.referencetypeids'), function (req, res) {\n    res.json(coreConnector.core.nodeOPCUA.ReferenceTypeIds)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/xmlsets/public', RED.auth.needsPermission('opcuaIIoT.xmlsets'), function (req, res) {\n    let xmlset = []\n    xmlset.push(coreConnector.core.nodeOPCUA.di_nodeset_filename)\n    xmlset.push(coreConnector.core.nodeOPCUA.adi_nodeset_filename)\n    xmlset.push('public/vendor/opc-foundation/xml/Opc.ISA95.NodeSet2.xml')\n    xmlset.push('public/vendor/opc-foundation/xml/Opc.Ua.Adi.NodeSet2.xml')\n    xmlset.push('public/vendor/opc-foundation/xml/Opc.Ua.Di.NodeSet2.xml')\n    xmlset.push('public/vendor/opc-foundation/xml/Opc.Ua.Gds.NodeSet2.xml')\n    xmlset.push('public/vendor/harting/10_di.xml')\n    xmlset.push('public/vendor/harting/20_autoid.xml')\n    xmlset.push('public/vendor/harting/30_aim.xml')\n    res.json(xmlset)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/list/DataTypeIds', RED.auth.needsPermission('opcuaIIoT.list.datatypeids'), function (req, res) {\n    let typeList = coreConnector.core.nodeOPCUA.DataTypeIds\n    let invertedTypeList = _.toArray(_.invert(typeList))\n    let resultTypeList = []\n\n    let typelistEntry\n    for (typelistEntry of invertedTypeList) {\n      resultTypeList.push({ nodeId: 'i=' + typeList[typelistEntry], label: typelistEntry })\n    }\n\n    res.json(resultTypeList)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/list/EvenTypeIds', RED.auth.needsPermission('opcuaIIoT.list.eventtypeids'), function (req, res) {\n    let objectTypeIds = coreConnector.core.nodeOPCUA.ObjectTypeIds\n    let invertedObjectTypeIds = _.invert(objectTypeIds)\n    let eventTypes = _.filter(invertedObjectTypeIds, function (objectTypeId) {\n      return objectTypeId.indexOf('Event') > -1\n    })\n\n    let typelistEntry\n    let eventTypesResults = []\n    for (typelistEntry of eventTypes) {\n      eventTypesResults.push({ nodeId: 'i=' + objectTypeIds[typelistEntry], label: typelistEntry })\n    }\n\n    res.json(eventTypesResults)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/list/InstanceTypeIds', RED.auth.needsPermission('opcuaIIoT.list.instancetypeids'), function (req, res) {\n    let typeList = coreConnector.core.nodeOPCUA.ObjectTypeIds\n    let variabletypeList = coreConnector.core.nodeOPCUA.VariableTypeIds\n    let invertedTypeList = _.toArray(_.invert(typeList))\n    let invertedVariableTypeList = _.toArray(_.invert(variabletypeList))\n    let resultTypeList = []\n\n    let typelistEntry\n    for (typelistEntry of invertedTypeList) {\n      resultTypeList.push({ nodeId: 'i=' + typeList[typelistEntry], label: typelistEntry })\n    }\n\n    for (typelistEntry of invertedVariableTypeList) {\n      resultTypeList.push({ nodeId: 'i=' + typeList[typelistEntry], label: typelistEntry })\n    }\n\n    res.json(resultTypeList)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/list/VariableTypeIds', RED.auth.needsPermission('opcuaIIoT.list.variabletypeids'), function (req, res) {\n    let typeList = coreConnector.core.nodeOPCUA.VariableTypeIds\n    let invertedTypeList = _.toArray(_.invert(typeList))\n    let resultTypeList = []\n\n    let typelistEntry\n    for (typelistEntry of invertedTypeList) {\n      resultTypeList.push({ nodeId: 'i=' + typeList[typelistEntry], label: typelistEntry })\n    }\n\n    res.json(resultTypeList)\n  })\n\n  RED.httpAdmin.get('/opcuaIIoT/list/ReferenceTypeIds', RED.auth.needsPermission('opcuaIIoT.list.referencetypeids'), function (req, res) {\n    let typeList = coreConnector.core.nodeOPCUA.ReferenceTypeIds\n    let invertedTypeList = _.toArray(_.invert(typeList))\n    let resultTypeList = []\n\n    let typelistEntry\n    for (typelistEntry of invertedTypeList) {\n      resultTypeList.push({ nodeId: 'i=' + typeList[typelistEntry], label: typelistEntry })\n    }\n\n    res.json(resultTypeList)\n  })\n}\n"]}