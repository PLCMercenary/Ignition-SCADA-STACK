{"version":3,"sources":["opcua-iiot-event.js"],"names":["module","exports","RED","install","require","nodes","registerType","config","OPCUAIIoTEvent","this","createNode","eventType","eventTypeLabel","resultType","queueSize","usingListener","name","showStatusActivities","showErrors","node","status","fill","shape","text","on","msg","subscribed","uaEventFields","coreListener","getBasicEventFields","push","getConditionFields","getStateFields","getAllEventFields","uaEventFilter","core","nodeOPCUA","constructEventFilter","payload","interval","nodetype","eventSubscriptionPayload","eventFilter","eventFields","send"],"mappings":"AAQA,aAOAA,OAAOC,QAAU,SAAUC,GAA3BF,QAAOC,sBAAyBE,UAC9BC,IAAAA,EAAQA,QAAA,mCAwERF,EAAIG,MAAMC,aAAa,mBArEvB,SAAyBC,GAAzBL,EAAAG,MAASG,WAATC,KAAyBF,GACvBL,KAAIG,UAAMK,EAAWC,UACrBF,KAAKE,eAAYJ,EAAOI,eACxBF,KAAKG,WAAAA,EAAiBL,YAAOK,QAC7BH,KAAKI,UAALN,EAAkBA,UAClBE,KAAKK,cAAYP,EAAOO,cACxBL,KAAKM,KAAAA,EAALC,KACAP,KAAKO,qBAALT,EAAAU,qBACAR,KAAKQ,WAAAA,EAALC,WAGA,IAAIC,EAAOV,KAAXU,EAAIA,YAAJ,EAGAA,EAAKC,OAAO,CAACC,KAAM,OAAQC,MAAO,OAAQC,KAAM,QAEhDJ,EAAKK,GAAG,QAAS,SAAUC,GAA3BN,EAAAO,YAAiBP,EAAAO,WAGXP,EAAKJ,cAALI,EAAKJ,WACPI,EAAIA,OAAKO,CAAAA,KAAY,OAAAJ,MAAA,MAAAC,KAAA,eAArBJ,EAEOC,OAAA,CAAAC,KAAA,OAAAC,MAAA,OAAAC,KAAA,mBAHTJ,EAMOC,OAAA,CAAAC,KAAA,OAAAC,MAAA,MAAAC,KAAA,aAIP,IAAII,EAAgBC,EAAaC,sBAEjC,OAAQV,EAAKN,YAAb,IAAA,YACEc,EAAAG,KAAAF,EAAAG,sBACEJ,MACA,IAAA,QACFA,EAAAG,KAAAF,EAAAI,kBACEL,MACA,IAAA,MACFA,EAAAG,KAAAF,EAAAK,qBAOF,IAAIC,EAAgBN,EAAaO,KAAKC,UAAUC,qBAAqBV,GAAjEO,EAAAA,IAGuB,iBAAhBT,EAAIa,UAAfC,EAAWd,EAAIa,SAIfb,EAAIe,SAAW,SAEf,IAAIC,EAA2B,CAA/B9B,UAAI8B,EAAAA,QAAAA,WAA2BtB,EAAAR,UAC7BA,YAAWc,EAAIa,QAAQ3B,eAAkBA,EACzC+B,YAAajB,EAAIa,QAAQJ,eAAiBA,EAC1CS,UAAAA,EAAalB,QAAIa,WAAQX,EAAZb,UACbA,SAAAA,EAAWW,QAAAc,UAAAA,GAJkBd,EAS/BA,QAAAgB,EAEAtB,EAAKyB,KAAKnB","file":"../opcua-iiot-event.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018 - Klaus Landsdorf (http://bianco-royal.de/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * Event Node-RED node.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreListener = require('./core/opcua-iiot-core-listener')\n\n  function OPCUAIIoTEvent (config) {\n    RED.nodes.createNode(this, config)\n    this.eventType = config.eventType\n    this.eventTypeLabel = config.eventTypeLabel\n    this.resultType = config.resultType || 'basic'\n    this.queueSize = config.queueSize\n    this.usingListener = config.usingListener\n    this.name = config.name\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n\n    let node = this\n    node.subscribed = false\n\n    node.status({fill: 'blue', shape: 'ring', text: 'new'})\n\n    node.on('input', function (msg) {\n      node.subscribed = !node.subscribed\n\n      if (node.usingListener) {\n        if (node.subscribed) {\n          node.status({fill: 'blue', shape: 'dot', text: 'subscribed'})\n        } else {\n          node.status({fill: 'blue', shape: 'ring', text: 'not subscribed'})\n        }\n      } else {\n        node.status({fill: 'blue', shape: 'dot', text: 'injected'})\n      }\n\n      let uaEventFields = coreListener.getBasicEventFields()\n\n      switch (node.resultType) {\n        case 'condition':\n          uaEventFields.push(coreListener.getConditionFields())\n          break\n        case 'state':\n          uaEventFields.push(coreListener.getStateFields())\n          break\n        case 'all':\n          uaEventFields.push(coreListener.getAllEventFields())\n          break\n        default:\n          break\n      }\n\n      let uaEventFilter = coreListener.core.nodeOPCUA.constructEventFilter(uaEventFields)\n      let interval = 1000\n\n      if (typeof msg.payload === 'number') {\n        interval = msg.payload // msec.\n      }\n\n      msg.nodetype = 'events'\n\n      let eventSubscriptionPayload = {\n        eventType: msg.payload.eventType || node.eventType,\n        eventFilter: msg.payload.uaEventFilter || uaEventFilter,\n        eventFields: msg.payload.uaEventFields || uaEventFields,\n        queueSize: msg.payload.queueSize || node.queueSize,\n        interval: msg.payload.interval || interval\n      }\n\n      // TODO: send works but it has a problem with debug node and ByteString\n      msg.payload = eventSubscriptionPayload\n\n      node.send(msg)\n    })\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Event', OPCUAIIoTEvent)\n}\n"]}