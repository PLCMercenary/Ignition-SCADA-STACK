{"version":3,"sources":["opcua-iiot-flex-server.js"],"names":["module","exports","RED","install","require","coreServer","path","os","scriptObjects","nodes","registerType","config","createNode","this","UNLIMITED_LISTENERS","endpoint","maxAllowedSessionNumber","maxConnectionsPerEndpoint","parseInt","port","maxAllowedSubscriptionNumber","alternateHostname","name","privateCertificateFile","showErrors","allowAnonymous","users","isAuditing","xmlsets","serverDiscovery","maxNodesPerBrowse","node","maxNodesPerRead","opcuaServer","setMaxListeners","sandbox","assert","server","constructAddressSpaceScript","eventObjects","internalDebugLog","core","nodeOPCUA","OPCUAServer","MAX_SUBSCRIPTION","geFullyQualifiedDomainName","get_fully_qualified_domain_name","run","standardNodeSetFile","xmlFiles","detailDebugLog","xmlsetFileName","startsWith","forEach","join","__dirname","includes","isa95DebugLog","toString","nodeOPCUAServerPath","getNodeOPCUAServerPath","publicCertificateFile","getNodeStatus","status","fill","statusParameter","shape","text","setNodeStatusTo","checkUser","userName","password","isValid","user","initNewServer","initialized","resourcePath","buildInfo","serverOptions","nodeset_filename","productName","buildNumber","buildDate","applicationUri","makeApplicationUrn","productUri","serverInfo","locale","gatewayServerUri","discoveryProfileUri","discoveryUrls","certificateFile","userManager","disableDiscovery","JSON","stringify","postInitialize","err","error","payload","on","channel","bgYellow","remoteAddress","remotePort","constructAddressSpaceFromScript","then","start","registerDiscovery","red","Error","hostname","discoveryEndpointUrl","registerServer","msg","nodetype","executeOpcuaCommand","send","engine","addressSpace","commandtype","restartServer","nodeId","findNode","searchedNode","shutdown","emit","internalDebugLogr","closeServer","done","simulatorInterval","clearInterval"],"mappings":"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","file":"../opcua-iiot-flex-server.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018 - Klaus Landsdorf (http://bianco-royal.de/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * Server Node-RED node.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreServer = require('./core/opcua-iiot-core-server')\n  let path = require('path')\n  let os = require('os')\n  const {VM} = require('vm2')\n  let scriptObjects = {}\n\n  function OPCUAIIoTFlexServer (config) {\n    const UNLIMITED_LISTENERS = 0\n\n    RED.nodes.createNode(this, config)\n\n    this.port = config.port\n    this.endpoint = config.endpoint\n    this.maxAllowedSessionNumber = parseInt(config.maxAllowedSessionNumber) || 10\n    this.maxConnectionsPerEndpoint = parseInt(config.maxConnectionsPerEndpoint) || 10\n    this.maxAllowedSubscriptionNumber = parseInt(config.maxAllowedSubscriptionNumber) || 50\n    this.alternateHostname = config.alternateHostname\n    this.name = config.name\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.publicCertificateFile = config.publicCertificateFile\n    this.privateCertificateFile = config.privateCertificateFile\n    // Security\n    this.allowAnonymous = config.allowAnonymous\n    // User Management\n    this.users = config.users\n    // XML-Set Management\n    this.xmlsets = config.xmlsets\n    // Audit\n    this.isAuditing = config.isAuditing\n    // discovery\n    this.disableDiscovery = !config.serverDiscovery\n    // limits\n    this.maxNodesPerRead = config.maxNodesPerRead || 1000\n    this.maxNodesPerBrowse = config.maxNodesPerBrowse || 2000\n\n    let node = this\n    node.setMaxListeners(UNLIMITED_LISTENERS)\n    node.initialized = false\n    node.opcuaServer = null\n\n    node.assert = require('better-assert')\n\n    const vm = new VM({ sandbox: { node, coreServer, scriptObjects } })\n\n    node.constructAddressSpaceScript = function (server, constructAddressSpaceScript, eventObjects) {\n      server.internalDebugLog('Init Function Block Flex Server')\n    }\n\n    vm.run('node.constructAddressSpaceScript = ' + config.addressSpaceScript)\n\n    coreServer.core.nodeOPCUA.OPCUAServer.MAX_SUBSCRIPTION = node.maxAllowedSubscriptionNumber\n    let geFullyQualifiedDomainName = coreServer.core.nodeOPCUA.get_fully_qualified_domain_name\n    let makeApplicationUrn = coreServer.core.nodeOPCUA.makeApplicationUrn\n\n    let standardNodeSetFile = coreServer.core.nodeOPCUA.standard_nodeset_file\n    let xmlFiles = [standardNodeSetFile]\n\n    if (node.xmlsets) {\n      node.xmlsets.forEach(function (xmlsetFileName, i) {\n        coreServer.detailDebugLog('Load XML Set for ' + xmlsetFileName.name)\n        if (xmlsetFileName.path) {\n          if (xmlsetFileName.path.startsWith('public/vendor/')) {\n            xmlFiles.push(path.join(__dirname, xmlsetFileName.path))\n          } else {\n            xmlFiles.push(xmlsetFileName.path)\n          }\n\n          if (xmlsetFileName.path.includes('ISA95')) {\n            // add server ISA95 extension to node-opcua\n            coreServer.isa95DebugLog('installing ISA95 extend')\n            // require('node-opcua-isa95')(coreServer.core.nodeOPCUA)\n          }\n        }\n      })\n      coreServer.detailDebugLog('append xmlFiles: ' + xmlFiles.toString())\n    }\n\n    let nodeOPCUAServerPath = coreServer.core.getNodeOPCUAServerPath()\n\n    coreServer.detailDebugLog('config: ' + node.publicCertificateFile)\n    if (node.publicCertificateFile === null || node.publicCertificateFile === '') {\n      node.publicCertificateFile = path.join(nodeOPCUAServerPath, '/certificates/server_selfsigned_cert_2048.pem')\n      coreServer.detailDebugLog('default key: ' + node.publicCertificateFile)\n    }\n\n    coreServer.detailDebugLog('config: ' + node.privateCertificateFile)\n    if (node.privateCertificateFile === null || node.privateCertificateFile === '') {\n      node.privateCertificateFile = path.join(nodeOPCUAServerPath, '/certificates/PKI/own/private/private_key.pem')\n      coreServer.detailDebugLog('default key: ' + node.privateCertificateFile)\n    }\n\n    node.setNodeStatusTo = function (statusValue) {\n      let statusParameter = coreServer.core.getNodeStatus(statusValue)\n      node.status({fill: statusParameter.fill, shape: statusParameter.shape, text: statusParameter.status})\n    }\n\n    node.setNodeStatusTo('waiting')\n    coreServer.internalDebugLog('flex node sets:' + xmlFiles.toString())\n\n    node.checkUser = function (userName, password) {\n      let isValid = false\n      coreServer.internalDebugLog('Is Valid Server User?')\n\n      node.users.forEach(function (user, index, array) {\n        if (userName === user.name && password === user.password) {\n          coreServer.internalDebugLog('Valid Server User Found')\n          isValid = true\n        }\n      })\n\n      return isValid\n    }\n\n    node.initNewServer = function () {\n      node.initialized = false\n\n      coreServer.name = 'NodeREDFlexIIoTServer'\n\n      let serverOptions = {\n        port: node.port,\n        nodeset_filename: xmlFiles,\n        resourcePath: node.endpoint || 'UA/NodeREDFlexIIoTServer',\n        buildInfo: {\n          productName: node.name || 'Node-RED Flex IIoT Server',\n          buildNumber: '24122017',\n          buildDate: new Date(2017, 12, 24)\n        },\n        serverCapabilities: {\n          operationLimits: {\n            maxNodesPerRead: node.maxNodesPerRead,\n            maxNodesPerBrowse: node.maxNodesPerBrowse\n          }\n        },\n        serverInfo: {\n          // applicationType: ApplicationType.CLIENTANDSERVER,\n          applicationUri: makeApplicationUrn(geFullyQualifiedDomainName(), 'NodeRED-Flex-IIoT-Server'),\n          productUri: 'NodeRED-Flex-IIoT-Server',\n          applicationName: {text: 'NodeRED', locale: 'en'},\n          gatewayServerUri: null,\n          discoveryProfileUri: null,\n          discoveryUrls: []\n        },\n        maxAllowedSessionNumber: node.maxAllowedSessionNumber,\n        maxConnectionsPerEndpoint: node.maxConnectionsPerEndpoint,\n        allowAnonymous: node.allowAnonymous,\n        certificateFile: node.publicCertificateFile,\n        privateKeyFile: node.privateCertificateFile,\n        alternateHostname: node.alternateHostname || '',\n        userManager: {\n          isValidUser: node.checkUser\n        },\n        isAuditing: node.isAuditing,\n        disableDiscovery: node.disableDiscovery\n      }\n\n      coreServer.detailDebugLog('serverOptions:' + JSON.stringify(serverOptions))\n\n      try {\n        node.opcuaServer = new coreServer.core.nodeOPCUA.OPCUAServer(serverOptions)\n        node.opcuaServer.initialize(node.postInitialize)\n      } catch (err) {\n        node.error(err, {payload: 'Server Failure! Please, check the server settings!'})\n      }\n\n      node.opcuaServer.on('newChannel', function (channel) {\n        coreServer.internalDebugLog('Client connected new channel with address = '.bgYellow, channel.remoteAddress, ' port = ', channel.remotePort)\n      })\n\n      node.opcuaServer.on('closeChannel', function (channel) {\n        coreServer.internalDebugLog('Client disconnected close channel with address = '.bgCyan, channel.remoteAddress, ' port = ', channel.remotePort)\n      })\n    }\n\n    node.postInitialize = function () {\n      if (node.opcuaServer) {\n        node.eventObjects = {} // event objects should stay in memory\n        coreServer.constructAddressSpaceFromScript(node.opcuaServer, node.constructAddressSpaceScript, node.eventObjects).then(function () {\n          coreServer.start(node.opcuaServer, node)\n          node.setNodeStatusTo('active')\n          node.registerDiscovery()\n        }).catch(function (err) {\n          coreServer.internalDebugLog(err)\n          if (node.showErrors) {\n            node.error(err, {payload: ''})\n          }\n        })\n      } else {\n        node.initialized = false\n        coreServer.internalDebugLog('OPC UA Server Is Not Ready'.red)\n        if (node.showErrors) {\n          node.error(new Error('OPC UA Server Is Not Ready'), {payload: ''})\n        }\n      }\n    }\n\n    node.registerDiscovery = function () {\n      let hostname = os.hostname()\n      let discoveryEndpointUrl\n\n      if (hostname) {\n        discoveryEndpointUrl = 'opc.tcp://' + hostname + ':4840/UAFlexDiscovery'\n        coreServer.internalDebugLog('Registering Server To ' + discoveryEndpointUrl)\n\n        node.opcuaServer.registerServer(discoveryEndpointUrl, function (err) {\n          if (err) {\n            coreServer.internalDebugLog('Register Server Discovery Error'.red + err)\n          } else {\n            coreServer.internalDebugLog('Discovery Setup Discovery Done'.green)\n          }\n        })\n      }\n\n      discoveryEndpointUrl = 'opc.tcp://localhost:4840/UAFlexDiscovery'\n      coreServer.internalDebugLog('Registering Server To ' + discoveryEndpointUrl)\n\n      node.opcuaServer.registerServer(discoveryEndpointUrl, function (err) {\n        if (err) {\n          coreServer.internalDebugLog('Register Server Discovery Error'.red + err)\n        } else {\n          coreServer.internalDebugLog('Discovery Setup Discovery Done'.green)\n        }\n      })\n    }\n\n    node.initNewServer()\n\n    node.on('input', function (msg) {\n      if (!node.opcuaServer || !node.initialized) {\n        node.error(new Error('Server Not Ready For Inputs'), msg)\n        return false\n      }\n\n      switch (msg.nodetype) {\n        case 'CMD':\n          node.executeOpcuaCommand(msg)\n          break\n        default:\n          node.error(new Error('Unknown Node Type ' + msg.nodetype), msg)\n      }\n\n      node.send(msg)\n    })\n\n    node.executeOpcuaCommand = function (msg) {\n      let addressSpace = node.opcuaServer.engine.addressSpace\n      if (!addressSpace) {\n        node.error(new Error('Server AddressSpace Not Valid'), msg)\n      }\n\n      switch (msg.payload.commandtype) {\n        case 'restart':\n          node.restartServer()\n          break\n        case 'deleteNode':\n          if (msg.payload.nodeId) {\n            let searchedNode = addressSpace.findNode(msg.payload.nodeId)\n            if (searchedNode) {\n              coreServer.internalDebugLog('Delete NodeId ' + msg.payload.nodeId)\n              addressSpace.deleteNode(searchedNode)\n            } else {\n              coreServer.internalDebugLog('Delete NodeId Not Found ' + msg.payload.nodeId)\n            }\n          } else {\n            node.error(new Error('OPC UA Command NodeId Not Valid'), msg)\n          }\n          break\n        default:\n          node.error(new Error('Unknown OPC UA Command'), msg)\n      }\n    }\n\n    node.restartServer = function () {\n      coreServer.internalDebugLog('Restart OPC UA Server')\n\n      if (node.opcuaServer) {\n        node.opcuaServer.shutdown(function () {\n          node.opcuaServer = null\n          node.emit('shutdown')\n          node.initNewServer()\n        })\n      } else {\n        node.opcuaServer = null\n        node.emit('shutdown')\n        node.initNewServer()\n      }\n\n      if (node.opcuaServer) {\n        coreServer.internalDebugLog('OPC UA Server restarted')\n      } else {\n        coreServer.internalDebugLogr('Can not restart OPC UA Server')\n      }\n    }\n\n    node.on('close', function (done) {\n      node.closeServer(done)\n    })\n\n    node.closeServer = function (done) {\n      if (node.opcuaServer) {\n        if (coreServer.simulatorInterval) {\n          clearInterval(coreServer.simulatorInterval)\n        }\n        coreServer.simulatorInterval = null\n        node.opcuaServer.shutdown(function () {\n          node.opcuaServer = null\n          if (done) {\n            done()\n          }\n        })\n      } else {\n        node.opcuaServer = null\n        if (done) {\n          done()\n        }\n      }\n    }\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Flex-Server', OPCUAIIoTFlexServer)\n}\n"]}