"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};module.exports=function(i){require("source-map-support").install();var c=require("./core/opcua-iiot-core-client");i.nodes.registerType("OPCUA-IIoT-Write",function(e){i.nodes.createNode(this,e),this.name=e.name,this.justValue=e.justValue,this.showStatusActivities=e.showStatusActivities,this.showErrors=e.showErrors,this.connector=i.nodes.getNode(e.connector);var s=this;if(s.reconnectTimeout=1e3,s.sessionTimeout=null,s.opcuaClient=null,s.opcuaSession=null,s.verboseLog=function(e){i.settings.verbose&&c.writeDebugLog(e)},s.statusLog=function(e){i.settings.verbose&&s.showStatusActivities&&s.verboseLog("Status: "+e)},s.setNodeStatusTo=function(e){s.statusLog(e);var t=c.core.getNodeStatus(e,s.showStatusActivities);s.status({fill:t.fill,shape:t.shape,text:t.status})},s.handleWriteError=function(e,t){c.writeDebugLog(e),s.showErrors&&s.error(e,t),c.core.isSessionBad(e)&&s.connector.resetBadSession()},s.writeToSession=function(e,o){if(e)if("terminated"===e.sessionId)s.handleWriteError(new Error("Session Terminated"),o);else{var t=c.core.buildNodesToWrite(o);c.write(e,t).then(function(e){try{var t=s.buildResultMessage(o,e);s.send(t)}catch(e){s.handleWriteError(e,o)}}).catch(function(e){s.handleWriteError(e,o)})}else s.handleWriteError(new Error("Session Not Valid On Write"),o)},s.buildResultMessage=function(t,o){var r=t;t.nodetype="write";var n={};s.justValue?(n=JSON.stringify({statusCodes:o.statusCodes},null,2),r.valuesToWrite&&delete r.valuesToWrite):n=JSON.stringify(o,null,2);try{i.util.setMessageProperty(r,"payload",JSON.parse(n))}catch(e){c.writeDebugLog(e),s.showErrors&&(s.warn("JSON not to parse from string for write statusCodes type "+_typeof(o.statusCodes)),s.error(e,t)),r.resultsConverted=n,r.error=e.message}return r},s.on("input",function(e){return"OPEN"!==s.connector.stateMachine.getMachineState()?(c.writeDebugLog("Client State Not Open On Write"),void(s.showErrors&&s.error(new Error("Client Not Open On Wirte"),e))):s.opcuaSession?void("write"===e.injectType&&s.writeToSession(s.opcuaSession,e)):(c.writeDebugLog("Session Not Ready To Write"),void(s.showErrors&&s.error(new Error("Session Not Ready To Write"),e)))}),s.setOPCUAConnected=function(e){s.opcuaClient=e,s.setNodeStatusTo("connected")},s.opcuaSessionStarted=function(e){s.opcuaSession=e,s.setNodeStatusTo("active")},s.connectorShutdown=function(e){c.writeDebugLog("Connector Shutdown"),e&&(s.opcuaClient=e)},!s.connector)throw new TypeError("Connector Not Valid");s.connector.on("connected",s.setOPCUAConnected),s.connector.on("session_started",s.opcuaSessionStarted),s.connector.on("after_reconnection",s.connectorShutdown),c.core.setNodeInitalState(s.connector.stateMachine.getMachineState(),s)})};
//# sourceMappingURL=maps/opcua-iiot-write.js.map
