{"version":3,"sources":["opcua-iiot-server.js"],"names":["module","exports","RED","install","require","coreServer","path","os","LocalizedText","nodes","registerType","config","OPCUAIIoTServer","this","port","endpoint","parseInt","maxAllowedSessionNumber","maxConnectionsPerEndpoint","maxAllowedSubscriptionNumber","alternateHostname","name","showStatusActivities","showErrors","publicCertificateFile","allowAnonymous","users","xmlsets","isAuditing","asoDemo","disableDiscovery","serverDiscovery","maxNodesPerRead","node","initialized","core","nodeOPCUA","OPCUAServer","MAX_SUBSCRIPTION","geFullyQualifiedDomainName","standardNodeSetFile","standard_nodeset_file","xmlsetFileName","i","forEach","detailDebugLog","startsWith","xmlFiles","push","includes","isa95DebugLog","toString","nodeOPCUAServerPath","getNodeOPCUAServerPath","join","privateCertificateFile","setNodeStatusTo","statusValue","statusParameter","getNodeStatus","shape","text","status","checkUser","userName","password","isValid","user","index","array","initNewServer","serverOptions","nodeset_filename","resourcePath","buildInfo","productName","buildNumber","Date","serverCapabilities","operationLimits","serverInfo","applicationUri","makeApplicationUrn","productUri","locale","applicationName","gatewayServerUri","discoveryProfileUri","certificateFile","privateKeyFile","userManager","JSON","stringify","opcuaServer","initialize","on","channel","bgYellow","remoteAddress","remotePort","bgCyan","postInitialize","then","err","internalDebugLog","payload","start","catch","registerDiscovery","hostname","discoveryEndpointUrl","registerServer","red","green","msg","error","nodetype","changeAddressSpace","executeOpcuaCommand","Error","send","objecttype","indexOf","addVariableToAddressSpace","humanReadableType","addressSpace","engine","rootFolder","findNode","referenceNodeId","variableData","getVariantValue","datatype","value","addVariable","componentOf","browsename","nodeId","displayname","browseName","displayName","dataType","Variant","get","DataType","set","variant","StatusCodes","Good","addObjectToAddressSpace","addObject","organizedBy","commandtype","searchedNode","restartServer","shutdown","emit","done","closeServer","simulatorInterval","clearInterval"],"mappings":"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","file":"../opcua-iiot-server.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018 - Klaus Landsdorf (http://bianco-royal.de/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * Server Node-RED node.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreServer = require('./core/opcua-iiot-core-server')\n  let path = require('path')\n  let os = require('os')\n  let LocalizedText = require('node-opcua').LocalizedText\n\n  function OPCUAIIoTServer (config) {\n    RED.nodes.createNode(this, config)\n\n    this.port = config.port\n    this.endpoint = config.endpoint\n    this.maxAllowedSessionNumber = parseInt(config.maxAllowedSessionNumber) || 10\n    this.maxConnectionsPerEndpoint = parseInt(config.maxConnectionsPerEndpoint) || 10\n    this.maxAllowedSubscriptionNumber = parseInt(config.maxAllowedSubscriptionNumber) || 50\n    this.alternateHostname = config.alternateHostname\n    this.name = config.name\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.publicCertificateFile = config.publicCertificateFile\n    this.privateCertificateFile = config.privateCertificateFile\n    // Security\n    this.allowAnonymous = config.allowAnonymous\n    // User Management\n    this.users = config.users\n    // XML-Set Management\n    this.xmlsets = config.xmlsets\n    // Audit\n    this.isAuditing = config.isAuditing\n    // address space objects demo\n    this.asoDemo = config.asoDemo\n    // discovery\n    this.disableDiscovery = !config.serverDiscovery\n    // limits\n    this.maxNodesPerRead = config.maxNodesPerRead || 1000\n    this.maxNodesPerBrowse = config.maxNodesPerBrowse || 2000\n\n    let node = this\n    node.initialized = false\n    node.opcuaServer = null\n\n    coreServer.core.nodeOPCUA.OPCUAServer.MAX_SUBSCRIPTION = node.maxAllowedSubscriptionNumber\n    let geFullyQualifiedDomainName = coreServer.core.nodeOPCUA.get_fully_qualified_domain_name\n    let makeApplicationUrn = coreServer.core.nodeOPCUA.makeApplicationUrn\n\n    let standardNodeSetFile = coreServer.core.nodeOPCUA.standard_nodeset_file\n    let xmlFiles = [standardNodeSetFile]\n\n    if (node.xmlsets) {\n      node.xmlsets.forEach(function (xmlsetFileName, i) {\n        coreServer.detailDebugLog('Load XML Set for ' + xmlsetFileName.name)\n        if (xmlsetFileName.path) {\n          if (xmlsetFileName.path.startsWith('public/vendor/')) {\n            xmlFiles.push(path.join(__dirname, xmlsetFileName.path))\n          } else {\n            xmlFiles.push(xmlsetFileName.path)\n          }\n\n          if (xmlsetFileName.path.includes('ISA95')) {\n            // add server ISA95 extension to node-opcua\n            coreServer.isa95DebugLog('installing ISA95 extend')\n            // require('node-opcua-isa95')(coreServer.core.nodeOPCUA)\n          }\n        }\n      })\n      coreServer.detailDebugLog('append xmlFiles: ' + xmlFiles.toString())\n    }\n\n    let nodeOPCUAServerPath = coreServer.core.getNodeOPCUAServerPath()\n\n    coreServer.detailDebugLog('config: ' + node.publicCertificateFile)\n    if (node.publicCertificateFile === null || node.publicCertificateFile === '') {\n      node.publicCertificateFile = path.join(nodeOPCUAServerPath, '/certificates/server_selfsigned_cert_2048.pem')\n      coreServer.detailDebugLog('default key: ' + node.publicCertificateFile)\n    }\n\n    coreServer.detailDebugLog('config: ' + node.privateCertificateFile)\n    if (node.privateCertificateFile === null || node.privateCertificateFile === '') {\n      node.privateCertificateFile = path.join(nodeOPCUAServerPath, '/certificates/PKI/own/private/private_key.pem')\n      coreServer.detailDebugLog('default key: ' + node.privateCertificateFile)\n    }\n\n    node.setNodeStatusTo = function (statusValue) {\n      let statusParameter = coreServer.core.getNodeStatus(statusValue)\n      node.status({fill: statusParameter.fill, shape: statusParameter.shape, text: statusParameter.status})\n    }\n\n    node.setNodeStatusTo('waiting')\n    coreServer.internalDebugLog('node set:' + xmlFiles.toString())\n\n    node.checkUser = function (userName, password) {\n      let isValid = false\n      coreServer.internalDebugLog('Is Valid Server User?')\n\n      node.users.forEach(function (user, index, array) {\n        if (userName === user.name && password === user.password) {\n          coreServer.internalDebugLog('Valid Server User Found')\n          isValid = true\n        }\n      })\n\n      return isValid\n    }\n\n    node.initNewServer = function () {\n      node.initialized = false\n\n      coreServer.name = 'NodeREDIIoTServer'\n\n      let serverOptions = {\n        port: node.port,\n        nodeset_filename: xmlFiles,\n        resourcePath: node.endpoint || 'UA/NodeREDIIoTServer',\n        buildInfo: {\n          productName: node.name || 'NodeOPCUA IIoT Server',\n          buildNumber: '160417',\n          buildDate: new Date(2017, 4, 16)\n        },\n        serverCapabilities: {\n          operationLimits: {\n            maxNodesPerRead: node.maxNodesPerRead,\n            maxNodesPerBrowse: node.maxNodesPerBrowse\n          }\n        },\n        serverInfo: {\n          // applicationType: ApplicationType.CLIENTANDSERVER,\n          applicationUri: makeApplicationUrn(geFullyQualifiedDomainName(), 'NodeRED-IIoT-Server'),\n          productUri: 'NodeRED-IIoT-Server',\n          applicationName: {text: 'NodeRED', locale: 'en'},\n          gatewayServerUri: null,\n          discoveryProfileUri: null,\n          discoveryUrls: []\n        },\n        maxAllowedSessionNumber: node.maxAllowedSessionNumber,\n        maxConnectionsPerEndpoint: node.maxConnectionsPerEndpoint,\n        allowAnonymous: node.allowAnonymous,\n        certificateFile: node.publicCertificateFile,\n        privateKeyFile: node.privateCertificateFile,\n        alternateHostname: node.alternateHostname || '',\n        userManager: {\n          isValidUser: node.checkUser\n        },\n        isAuditing: node.isAuditing,\n        disableDiscovery: node.disableDiscovery\n      }\n\n      coreServer.detailDebugLog('serverOptions:' + JSON.stringify(serverOptions))\n      node.opcuaServer = new coreServer.core.nodeOPCUA.OPCUAServer(serverOptions)\n      node.opcuaServer.initialize(node.postInitialize)\n\n      node.opcuaServer.on('newChannel', function (channel) {\n        coreServer.internalDebugLog('Client connected new channel with address = '.bgYellow, channel.remoteAddress, ' port = ', channel.remotePort)\n      })\n\n      node.opcuaServer.on('closeChannel', function (channel) {\n        coreServer.internalDebugLog('Client disconnected close channel with address = '.bgCyan, channel.remoteAddress, ' port = ', channel.remotePort)\n      })\n    }\n\n    node.postInitialize = function () {\n      coreServer.constructAddressSpace(node.opcuaServer, node.asoDemo).then(function (err) {\n        if (err) {\n          coreServer.internalDebugLog(err)\n          if (node.showErrors) {\n            node.error(err, {payload: ''})\n          }\n        } else {\n          coreServer.start(node.opcuaServer, node)\n          node.setNodeStatusTo('active')\n          node.registerDiscovery()\n        }\n      }).catch(function (err) {\n        coreServer.internalDebugLog(err)\n        if (node.showErrors) {\n          node.error(err, {payload: ''})\n        }\n      })\n    }\n\n    // TODO: check if that is correct for multiple servers with different IP's and endpoints\n    node.registerDiscovery = function () {\n      let hostname = os.hostname()\n      let discoveryEndpointUrl\n\n      if (hostname) {\n        discoveryEndpointUrl = 'opc.tcp://' + hostname + ':4840/UADiscovery'\n        coreServer.internalDebugLog('Registering Server To ' + discoveryEndpointUrl)\n\n        node.opcuaServer.registerServer(discoveryEndpointUrl, function (err) {\n          if (err) {\n            coreServer.internalDebugLog('Register Server Discovery Error'.red + err)\n          } else {\n            coreServer.internalDebugLog('Discovery Setup Discovery Done'.green)\n          }\n        })\n      }\n\n      discoveryEndpointUrl = 'opc.tcp://localhost:4840/UADiscovery'\n      coreServer.internalDebugLog('Registering Server To ' + discoveryEndpointUrl)\n\n      node.opcuaServer.registerServer(discoveryEndpointUrl, function (err) {\n        if (err) {\n          coreServer.internalDebugLog('Register Server Discovery Error'.red + err)\n        } else {\n          coreServer.internalDebugLog('Discovery Setup Discovery Done'.green)\n        }\n      })\n    }\n\n    node.initNewServer()\n\n    node.on('input', function (msg) {\n      if (!node.opcuaServer || !node.initialized) {\n        node.error(new Error('Server Not Ready For Inputs'), msg)\n        return false\n      }\n\n      switch (msg.nodetype) {\n        case 'ASO':\n          node.changeAddressSpace(msg)\n          break\n\n        case 'CMD':\n          node.executeOpcuaCommand(msg)\n          break\n        default:\n          node.error(new Error('Unknown Node Type ' + msg.nodetype), msg)\n      }\n\n      node.send(msg)\n    })\n\n    node.changeAddressSpace = function (msg) { // TODO: refactor to work with the new OPC UA type list\n      if (msg.payload.objecttype && msg.payload.objecttype.indexOf('Variable') > -1) {\n        node.addVariableToAddressSpace(msg, msg.payload.objecttype)\n      } else {\n        node.addObjectToAddressSpace(msg, msg.payload.objecttype)\n      }\n    }\n\n    node.addVariableToAddressSpace = function (msg, humanReadableType) {\n      let addressSpace = node.opcuaServer.engine.addressSpace\n      if (!addressSpace) {\n        node.error(new Error('Server AddressSpace Not Valid'), msg)\n      }\n\n      let rootFolder = addressSpace.findNode(msg.payload.referenceNodeId)\n      let variableData = coreServer.core.getVariantValue(msg.payload.datatype, msg.payload.value)\n\n      if (rootFolder) {\n        addressSpace.addVariable({\n          componentOf: rootFolder,\n          nodeId: msg.payload.nodeId,\n          browseName: msg.payload.browsename,\n          displayName: new LocalizedText({locale: null, text: msg.payload.displayname}),\n          dataType: msg.payload.datatype,\n          value: {\n            get: function () {\n              return new coreServer.core.nodeOPCUA.Variant({\n                dataType: coreServer.core.nodeOPCUA.DataType[msg.payload.datatype],\n                value: variableData\n              })\n            },\n            set: function (variant) {\n              variableData = variant.value\n              return coreServer.core.nodeOPCUA.StatusCodes.Good\n            }\n          }\n        })\n        coreServer.internalDebugLog(msg.payload.nodeId + ' ' + humanReadableType + ' Added To Address Space')\n      } else {\n        node.error(new Error('Root Reference Not Found'), msg)\n      }\n    }\n\n    node.addObjectToAddressSpace = function (msg, humanReadableType) {\n      let addressSpace = node.opcuaServer.engine.addressSpace\n      if (!addressSpace) {\n        node.error(new Error('Server AddressSpace Not Valid'), msg)\n      }\n\n      let rootFolder = addressSpace.findNode(msg.payload.referenceNodeId)\n\n      if (rootFolder) {\n        addressSpace.addObject({\n          organizedBy: rootFolder,\n          nodeId: msg.payload.nodeId,\n          browseName: msg.payload.browsename,\n          displayName: new LocalizedText({locale: null, text: msg.payload.displayname})\n        })\n        coreServer.internalDebugLog(msg.payload.nodeId + ' ' + humanReadableType + ' Added To Address Space')\n      } else {\n        node.error(new Error('Root Reference Not Found'), msg)\n      }\n    }\n\n    node.executeOpcuaCommand = function (msg) {\n      let addressSpace = node.opcuaServer.engine.addressSpace\n      if (!addressSpace) {\n        node.error(new Error('Server AddressSpace Not Valid'), msg)\n      }\n\n      switch (msg.payload.commandtype) {\n        case 'restart':\n          node.restartServer()\n          break\n        case 'deleteNode':\n          if (msg.payload.nodeId) {\n            let searchedNode = addressSpace.findNode(msg.payload.nodeId)\n            if (searchedNode) {\n              coreServer.internalDebugLog('Delete NodeId ' + msg.payload.nodeId)\n              addressSpace.deleteNode(searchedNode)\n            } else {\n              coreServer.internalDebugLog('Delete NodeId Not Found ' + msg.payload.nodeId)\n            }\n          } else {\n            node.error(new Error('OPC UA Command NodeId Not Valid'), msg)\n          }\n          break\n        default:\n          node.error(new Error('Unknown OPC UA Command'), msg)\n      }\n    }\n\n    node.restartServer = function () {\n      coreServer.internalDebugLog('Restart OPC UA Server')\n\n      if (node.opcuaServer) {\n        node.opcuaServer.shutdown(function () {\n          node.opcuaServer = null\n          node.emit('shutdown')\n          node.initNewServer()\n        })\n      } else {\n        node.opcuaServer = null\n        node.emit('shutdown')\n        node.initNewServer()\n      }\n\n      if (node.opcuaServer) {\n        coreServer.internalDebugLog('OPC UA Server restarted')\n      } else {\n        coreServer.internalDebugLog('Can not restart OPC UA Server')\n      }\n    }\n\n    node.on('close', function (done) {\n      node.closeServer(done)\n    })\n\n    node.closeServer = function (done) {\n      if (node.opcuaServer) {\n        if (coreServer.simulatorInterval) {\n          clearInterval(coreServer.simulatorInterval)\n        }\n        coreServer.simulatorInterval = null\n        node.opcuaServer.shutdown(function () {\n          node.opcuaServer = null\n          if (done) {\n            done()\n          }\n        })\n      } else {\n        node.opcuaServer = null\n        if (done) {\n          done()\n        }\n      }\n    }\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Server', OPCUAIIoTServer)\n}\n"]}