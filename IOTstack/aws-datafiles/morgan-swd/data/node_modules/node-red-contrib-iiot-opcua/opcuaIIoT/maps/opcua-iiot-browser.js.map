{"version":3,"sources":["opcua-iiot-browser.js"],"names":["module","exports","RED","install","require","coreBrowser","nodes","registerType","config","OPCUAIIoTBrowser","createNode","nodeId","this","justValue","sendNodesToRead","sendNodesToBrowser","sendNodesToListener","singleBrowseResult","showStatusActivities","showErrors","connector","node","items","core","OBJECTS_ROOT","browseTopic","opcuaClient","opcuaSession","setNodeStatusTo","statusValue","statusParameter","getNodeStatus","shape","status","transformToEntry","reference","toJSON","internalDebugLog","err","referenceTypeId","toString","isForward","browseName","displayName","nodeClass","browseErrorHandling","msg","results","push","text","isSessionBad","browserEntries","length","sendMessageBrowserResults","browserResult","nodesToRead","forEach","result","references","name","datatypeName","typeDefinition","sendMessage","addressItemList","browse","session","catch","browseNodeList","browseAddressSpaceItems","addressSpaceItems","entry","originMessage","nodetype","browserItems","payload","endpoint","nodesToReadCount","addressItemsToRead","addressItemsToReadCount","addressItemsToBrowse","addressItemsToBrowseCount","send","extractBrowserTopic","getMachineState","error","Error","rootNodeId","actiontype","root","browseByItem","browseToRoot","topic","includes","detailDebugLog","setOPCUAConnected","opcuaSessionStarted","connectorShutdown","TypeError","on","setNodeInitalState","stateMachine","httpAdmin","get","auth","needsPermission","req","res","getNode","params","id","entries","nodeRootId","decodeURIComponent","then","browseResult","JSON","stringify","json"],"mappings":"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","file":"../opcua-iiot-browser.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018 - Klaus Landsdorf (http://bianco-royal.de/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * Browser Node-RED node.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreBrowser = require('./core/opcua-iiot-core-browser')\n  let browserEntries = []\n\n  function OPCUAIIoTBrowser (config) {\n    RED.nodes.createNode(this, config)\n    this.nodeId = config.nodeId\n    this.name = config.name\n    // this.browseAll = config.browseAll\n    this.justValue = config.justValue\n    this.sendNodesToRead = config.sendNodesToRead\n    this.sendNodesToBrowser = config.sendNodesToBrowser\n    this.sendNodesToListener = config.sendNodesToListener\n    this.singleBrowseResult = config.singleBrowseResult\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.connector = RED.nodes.getNode(config.connector)\n\n    let node = this\n    node.items = []\n    node.browseTopic = coreBrowser.core.OBJECTS_ROOT\n    node.opcuaClient = null\n    node.opcuaSession = null\n    node.reconnectTimeout = 1000\n\n    node.setNodeStatusTo = function (statusValue) {\n      let statusParameter = coreBrowser.core.getNodeStatus(statusValue, node.showStatusActivities)\n      node.status({fill: statusParameter.fill, shape: statusParameter.shape, text: statusParameter.status})\n    }\n\n    node.transformToEntry = function (reference) {\n      if (reference) {\n        try {\n          return reference.toJSON()\n        } catch (err) {\n          coreBrowser.internalDebugLog(err)\n\n          return {\n            referenceTypeId: reference.referenceTypeId.toString(),\n            isForward: reference.isForward,\n            nodeId: reference.nodeId.toString(),\n            browseName: reference.browseName.toString(),\n            displayName: reference.displayName,\n            nodeClass: reference.nodeClass.toString(),\n            typeDefinition: reference.typeDefinition.toString()\n          }\n        }\n      } else {\n        coreBrowser.internalDebugLog('Empty Reference On Browse')\n      }\n    }\n\n    node.browseErrorHandling = function (err, msg) {\n      let results = []\n      if (err) {\n        results.push({\n          displayName: {text: 'Objects'},\n          nodeId: coreBrowser.core.OBJECTS_ROOT,\n          browseName: 'Objects'\n        })\n\n        coreBrowser.internalDebugLog('Browser Error ' + err)\n        if (node.showErrors) {\n          node.error(err, msg)\n        }\n\n        if (coreBrowser.core.isSessionBad(err)) {\n          node.connector.resetBadSession()\n        }\n      } else {\n        results = browserEntries\n        coreBrowser.internalDebugLog('Browse Done With Error: ' + results.length + ' item(s)')\n      }\n\n      browserEntries = results\n    }\n\n    node.sendMessageBrowserResults = function (msg, browserResult) {\n      let nodesToRead = []\n      let addressItemList = []\n\n      browserResult.forEach(function (result) {\n        result.references.forEach(function (reference) {\n          coreBrowser.internalDebugLog('Add Reference To List :' + reference)\n          browserEntries.push(node.transformToEntry(reference))\n          if (reference.nodeId) {\n            nodesToRead.push(reference.nodeId.toString())\n            addressItemList.push({ name: reference.browseName.name, nodeId: reference.nodeId.toString(), datatypeName: reference.typeDefinition.toString() })\n          }\n        })\n      })\n\n      node.sendMessage(msg, nodesToRead, addressItemList)\n    }\n\n    node.browse = function (session, msg) {\n      coreBrowser.internalDebugLog('Browse Topic To Call Browse ' + node.browseTopic)\n      browserEntries = []\n\n      coreBrowser.browse(session, node.browseTopic)\n        .then(function (browserResult) {\n          node.sendMessageBrowserResults(msg, browserResult)\n        }).catch(function (err) {\n          node.browseErrorHandling(err, msg)\n        })\n    }\n\n    node.browseNodeList = function (session, msg) {\n      browserEntries = []\n\n      if (node.singleBrowseResult) {\n        coreBrowser.browseAddressSpaceItems(session, msg.addressSpaceItems)\n          .then(function (browserResult) {\n            browserEntries = []\n            node.sendMessageBrowserResults(msg, browserResult)\n          }).catch(function (err) {\n            node.browseErrorHandling(err, msg)\n          })\n      } else {\n        msg.addressSpaceItems.map((entry) => (\n          coreBrowser.browse(session, entry.nodeId)\n            .then(function (browserResult) {\n              browserEntries = []\n              node.sendMessageBrowserResults(msg, browserResult)\n            }).catch(function (err) {\n              node.browseErrorHandling(err, msg)\n            })))\n      }\n    }\n\n    node.sendMessage = function (originMessage, nodesToRead, addressItemList) {\n      let msg = originMessage\n      msg.nodetype = 'browse'\n\n      msg.payload = {\n        browserItems: browserEntries\n      }\n\n      if (node.browseTopic && node.browseTopic !== '') {\n        msg.payload.browseTopic = node.browseTopic\n      }\n\n      if (!node.justValue) {\n        msg.payload.browserItemsCount = browserEntries.length\n        msg.payload.endpoint = node.connector.endpoint\n        msg.payload.session = node.opcuaSession.name || 'none'\n      }\n\n      if (node.sendNodesToRead && nodesToRead) {\n        msg.nodesToRead = nodesToRead\n        msg.nodesToReadCount = nodesToRead.length\n      }\n\n      if (node.sendNodesToListener && addressItemList) {\n        msg.addressItemsToRead = addressItemList\n        msg.addressItemsToReadCount = addressItemList.length\n      }\n\n      if (node.sendNodesToBrowser && addressItemList) {\n        msg.addressItemsToBrowse = addressItemList\n        msg.addressItemsToBrowseCount = addressItemList.length\n      }\n\n      node.send(msg)\n    }\n\n    node.on('input', function (msg) {\n      node.browseTopic = node.extractBrowserTopic(msg)\n\n      if (node.connector.stateMachine.getMachineState() !== 'OPEN') {\n        coreBrowser.internalDebugLog('Client State Not Open On Browse')\n        if (node.showErrors) {\n          node.error(new Error('Client Not Open On Browse'), msg)\n        }\n        return\n      }\n\n      if (!node.opcuaSession) {\n        node.error(new Error('Session Not Ready To Browse'), msg)\n        return\n      }\n\n      if (node.browseTopic && node.browseTopic !== '') {\n        node.browse(node.opcuaSession, msg)\n      } else {\n        if (msg.addressItemsToBrowse) {\n          msg.addressSpaceItems = msg.addressItemsToBrowse\n        }\n\n        if (msg.addressSpaceItems) {\n          node.browseNodeList(node.opcuaSession, msg)\n        } else {\n          node.error(new Error('No AddressSpace Items Or Root To Browse'), msg)\n        }\n      }\n    })\n\n    node.extractBrowserTopic = function (msg) {\n      let rootNodeId\n\n      if (msg.payload.actiontype === 'browse') { // event driven browsing\n        if (msg.payload.root && msg.payload.root.nodeId) {\n          coreBrowser.internalDebugLog('Root Selected External ' + msg.payload.root)\n          rootNodeId = node.browseByItem(msg.payload.root.nodeId) || node.browseToRoot()\n        } else {\n          rootNodeId = node.nodeId || node.browseToRoot()\n        }\n      } else {\n        if (msg.topic !== '' && msg.topic.includes('=')) {\n          rootNodeId = msg.topic // backward compatibles to v0.x\n        } else {\n          rootNodeId = node.nodeId\n        }\n      }\n\n      return rootNodeId\n    }\n\n    node.browseByItem = function (nodeId) {\n      coreBrowser.detailDebugLog('Browse To Parent ' + nodeId)\n      return nodeId\n    }\n\n    node.browseToRoot = function () {\n      coreBrowser.detailDebugLog('Browse To Root ' + coreBrowser.core.OBJECTS_ROOT)\n      return coreBrowser.core.OBJECTS_ROOT\n    }\n\n    node.setOPCUAConnected = function (opcuaClient) {\n      node.opcuaClient = opcuaClient\n      node.setNodeStatusTo('connected')\n    }\n\n    node.opcuaSessionStarted = function (opcuaSession) {\n      node.opcuaSession = opcuaSession\n      node.setNodeStatusTo('active')\n    }\n\n    node.connectorShutdown = function (opcuaClient) {\n      coreBrowser.internalDebugLog('Connector Shutdown')\n      if (opcuaClient) {\n        node.opcuaClient = opcuaClient\n      }\n    }\n\n    if (node.connector) {\n      node.connector.on('connected', node.setOPCUAConnected)\n      node.connector.on('session_started', node.opcuaSessionStarted)\n      node.connector.on('after_reconnection', node.connectorShutdown)\n    } else {\n      throw new TypeError('Connector Not Valid')\n    }\n\n    coreBrowser.core.setNodeInitalState(node.connector.stateMachine.getMachineState(), node)\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Browser', OPCUAIIoTBrowser)\n\n  RED.httpAdmin.get('/opcuaIIoT/browse/:id/:nodeId', RED.auth.needsPermission('opcuaIIoT.browse'), function (req, res) {\n    let node = RED.nodes.getNode(req.params.id)\n    let entries = []\n    let nodeRootId = decodeURIComponent(req.params.nodeId) || coreBrowser.core.OBJECTS_ROOT\n\n    if (node.opcuaSession) {\n      coreBrowser.browse(node.opcuaSession, nodeRootId).then(function (browserResult) {\n        browserResult.browseResult.forEach(function (result) {\n          if (result.references && result.references.length) {\n            result.references.forEach(function (reference) {\n              entries.push(node.transformToEntry(reference))\n            })\n          } else {\n            coreBrowser.detailDebugLog(JSON.stringify(result))\n          }\n        })\n        res.json(entries)\n        browserEntries = entries\n      }).catch(function (err) {\n        coreBrowser.internalDebugLog('Browser Error ' + err)\n        if (node.showErrors) {\n          node.error(err, {payload: 'Browse Internal Error'})\n        }\n\n        entries.push({\n          displayName: {text: 'Objects'},\n          nodeId: coreBrowser.core.OBJECTS_ROOT,\n          browseName: 'Objects'\n        })\n        res.json(entries)\n        browserEntries = entries\n      })\n    } else {\n      res.json(entries)\n      browserEntries = entries\n    }\n  })\n}\n"]}