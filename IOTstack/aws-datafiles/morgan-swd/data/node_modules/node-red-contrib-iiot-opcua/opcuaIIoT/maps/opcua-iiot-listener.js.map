{"version":3,"sources":["opcua-iiot-listener.js"],"names":["module","exports","RED","require","install","coreListener","nodes","registerType","config","Map","this","action","queueSize","OPCUAIIoTListener","createNode","showStatusActivities","name","showErrors","justValue","connector","node","sessionTimeout","reconnectTimeout","StatusCodes","core","nodeOPCUA","uaSubscription","AttributeIds","subscriptionStarting","monitoredItems","monitoredASO","verbose","internalDebugLog","logMessage","statusLog","settings","verboseLog","setNodeStatusTo","statusValue","statusParameter","getNodeStatus","shape","text","status","fill","timeMilliseconds","msg","payload","options","getSubscriptionParameters","cb","resetSubscription","sendAllMonitoredItems","addressSpaceItems","forEach","value","key","nodeId","datatypeName","push","clear","subscribeMonitoredItem","createSubscription","subscribeActionInput","subscribeEventsInput","subscribeMonitoredEvent","subscribingPreCheck","subscriptionId","updateSubscriptionStatus","length","subscriptionStarted","addressSpaceItem","_step","v","subscribeDebugLog","monitoredItem","get","toString","err","buildNewMonitoredItem","then","result","monitoredItemId","error","_iterator","Symbol","iterator","_iteratorNormalCompletion","next","done","_ret","_loop","_typeof","Error","terminate","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","undefined","_loop2","_step2","eventDebugLog","buildNewEventItem","set","catch","monitoredItemTerminated","_iterator2","return","updateMonitoredItemLists","itemToMonitor","has","delete","isNodeId","map","on","dataValue","monitoringParameters","filter","sendDataFromEvent","sendDataFromMonitoredItem","message","includes","resetBadSession","topic","nodetype","injectType","dataValuesString","JSON","stringify","parse","setMonitoring","analyzeEvent","opcuaSession","getBrowseName","eventResults","eventDetailDebugLog","util","setMessageProperty","detailDebugLog","callback","parameters","ClientSubscription","isSessionBad","attributeId","BrowseName","org","readValue","statusCode","Good","makeSubscription","browseName","buildNodesToListen","getMachineState","setOPCUAConnected","opcuaClient","connectorShutdown","opcuaSessionStarted"],"mappings":"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","file":"../opcua-iiot-listener.js","sourcesContent":["/*\n The BSD 3-Clause License\n\n Copyright 2016,2017,2018 - Klaus Landsdorf (http://bianco-royal.de/)\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\n\n/**\n * Listener Node-RED node.\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  let coreListener = require('./core/opcua-iiot-core-listener')\n  let Map = require('collections/map')\n\n  function OPCUAIIoTListener (config) {\n    RED.nodes.createNode(this, config)\n    this.action = config.action\n    this.queueSize = config.queueSize || 1\n    this.name = config.name\n    this.justValue = config.justValue\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.connector = RED.nodes.getNode(config.connector)\n\n    let node = this\n    node.reconnectTimeout = 1000\n    node.sessionTimeout = null\n    node.opcuaClient = null\n    node.opcuaSession = null\n    node.subscriptionStarted = false\n\n    let uaSubscription = null\n    let subscriptionStarting = false\n    let StatusCodes = coreListener.core.nodeOPCUA.StatusCodes\n    let AttributeIds = coreListener.core.nodeOPCUA.AttributeIds\n    node.monitoredItems = new Map()\n    node.monitoredASO = new Map()\n\n    node.verboseLog = function (logMessage) {\n      if (RED.settings.verbose) {\n        coreListener.internalDebugLog(logMessage)\n      }\n    }\n\n    node.statusLog = function (logMessage) {\n      if (RED.settings.verbose && node.showStatusActivities) {\n        node.verboseLog('Status: ' + logMessage)\n      }\n    }\n\n    node.setNodeStatusTo = function (statusValue) {\n      node.statusLog(statusValue)\n      let statusParameter = coreListener.core.getNodeStatus(statusValue, node.showStatusActivities)\n      node.status({fill: statusParameter.fill, shape: statusParameter.shape, text: statusParameter.status})\n    }\n\n    node.createSubscription = function (msg, cb) {\n      let timeMilliseconds = (typeof msg.payload === 'number') ? msg.payload : null\n\n      if (subscriptionStarting) {\n        coreListener.internalDebugLog('monitoring subscription try to start twice')\n      } else {\n        uaSubscription = null\n        node.subscriptionStarting = true\n        let options = {}\n        if (node.action !== 'events') {\n          coreListener.internalDebugLog('create monitoring subscription')\n          options = msg.payload.options || coreListener.getSubscriptionParameters(timeMilliseconds)\n        } else {\n          coreListener.internalDebugLog('create event subscription')\n          options = msg.payload.options || coreListener.getEventSubscribtionParameters(timeMilliseconds)\n        }\n        node.makeSubscription(options, cb)\n      }\n    }\n\n    node.resetSubscription = function () {\n      node.subscriptionStarting = false\n      node.sendAllMonitoredItems('SUBSCRIPTION TERMINATED')\n    }\n\n    node.sendAllMonitoredItems = function (payload) {\n      let addressSpaceItems = []\n      node.monitoredASO.forEach(function (value, key) {\n        addressSpaceItems.push({name: '', nodeId: key, datatypeName: ''})\n      })\n      node.send({payload: payload, monitoredASO: node.monitoredASO, addressSpaceItems: addressSpaceItems})\n      node.monitoredItems.clear()\n      node.monitoredASO.clear()\n    }\n\n    node.subscribeActionInput = function (msg) {\n      if (!uaSubscription) {\n        node.createSubscription(msg, function () {\n          node.subscribeMonitoredItem(msg)\n        })\n      } else {\n        if (node.subscribingPreCheck()) {\n          node.subscribeMonitoredItem(msg)\n        } else {\n          node.resetSubscription()\n        }\n      }\n    }\n\n    node.subscribeEventsInput = function (msg) {\n      if (!uaSubscription) {\n        node.createSubscription(msg, function () {\n          node.subscribeMonitoredEvent(msg)\n        })\n      } else {\n        if (node.subscribingPreCheck()) {\n          node.subscribeMonitoredEvent(msg)\n        } else {\n          node.resetSubscription()\n        }\n      }\n    }\n\n    node.subscribingPreCheck = function () {\n      return uaSubscription && typeof uaSubscription.subscriptionId !== 'string'\n    }\n\n    node.updateSubscriptionStatus = function () {\n      coreListener.internalDebugLog('listening' + ' (' + node.monitoredItems.length + ')')\n      node.setNodeStatusTo('listening' + ' (' + node.monitoredItems.length + ')')\n    }\n\n    node.subscribeMonitoredItem = function (msg) {\n      if (!node.subscriptionStarted) {\n        node.error(new Error('Subscription Not Started To Monitor'), msg)\n        return\n      }\n\n      let addressSpaceItem = null\n      for (addressSpaceItem of msg.addressSpaceItems) {\n        if (!addressSpaceItem.nodeId) {\n          coreListener.subscribeDebugLog('Address Space Item Not Valid to Monitor ' + addressSpaceItem)\n          return\n        }\n\n        if (addressSpaceItem.datatypeName === 'ns=0;i=0') {\n          coreListener.subscribeDebugLog('Address Space Item Not Allowed to Monitor ' + addressSpaceItem)\n          return\n        }\n\n        let monitoredItem = node.monitoredASO.get(addressSpaceItem.nodeId.toString())\n\n        if (!monitoredItem) {\n          coreListener.subscribeDebugLog('Monitored Item Subscribing ' + addressSpaceItem.nodeId)\n          coreListener.buildNewMonitoredItem(addressSpaceItem.nodeId, msg, uaSubscription)\n            .then(function (result) {\n              coreListener.subscribeDebugLog('Monitored Item Subscribed Id:' + result.monitoredItem.monitoredItemId + ' to ' + result.nodeId)\n              node.monitoredASO.set(result.nodeId.toString(), result.monitoredItem)\n            }).catch(function (err) {\n              coreListener.subscribeDebugLog(err)\n              if (node.showErrors) {\n                node.error(err, msg)\n              }\n            })\n        } else {\n          coreListener.subscribeDebugLog('Monitored Item Unsubscribe ' + addressSpaceItem.nodeId)\n          monitoredItem.terminate(function (err) {\n            node.monitoredItemTerminated(msg, monitoredItem, addressSpaceItem.nodeId, err)\n          })\n        }\n      }\n    }\n\n    node.subscribeMonitoredEvent = function (msg) {\n      if (!node.subscriptionStarted) {\n        node.error(new Error('Subscription Not Started To Monitor'), msg)\n        return\n      }\n\n      let addressSpaceItem = null\n      for (addressSpaceItem of msg.addressSpaceItems) {\n        if (!addressSpaceItem.nodeId) {\n          coreListener.eventDebugLog('Address Space Item Not Valid to Monitor Event Of ' + addressSpaceItem)\n          return\n        }\n\n        if (addressSpaceItem.datatypeName === 'ns=0;i=0') {\n          coreListener.subscribeDebugLog('Address Space Item Not Allowed to Monitor ' + addressSpaceItem)\n          return\n        }\n\n        let monitoredItem = node.monitoredASO.get(addressSpaceItem.nodeId.toString())\n\n        if (!monitoredItem) {\n          coreListener.eventDebugLog('Regsiter Event Item ' + addressSpaceItem.nodeId)\n          coreListener.buildNewEventItem(addressSpaceItem.nodeId, msg, uaSubscription)\n            .then(function (result) {\n              coreListener.eventDebugLog('Event Item Regsitered ' + result.monitoredItem.monitoredItemId + ' to ' + result.nodeId)\n              node.monitoredASO.set(result.nodeId.toString(), result.monitoredItem)\n            }).catch(function (err) {\n              coreListener.eventDebugLog(err)\n              if (node.showErrors) {\n                node.error(err, msg)\n              }\n            })\n        } else {\n          coreListener.subscribeDebugLog('Terminate Event Item' + addressSpaceItem.nodeId)\n          monitoredItem.terminate(function (err) {\n            node.monitoredItemTerminated(msg, monitoredItem, addressSpaceItem.nodeId, err)\n          })\n        }\n      }\n    }\n\n    node.monitoredItemTerminated = function (msg, monitoredItem, nodeId, err) {\n      if (err) {\n        coreListener.internalDebugLog(err + ' on ' + monitoredItem.monitoredItemId)\n        if (node.showErrors) {\n          node.error(err, msg)\n        }\n      }\n      node.updateMonitoredItemLists(monitoredItem, nodeId)\n    }\n\n    node.updateMonitoredItemLists = function (monitoredItem, nodeId) {\n      if (monitoredItem && monitoredItem.itemToMonitor) {\n        if (node.monitoredItems.has(monitoredItem.monitoredItemId)) {\n          node.monitoredItems.delete(monitoredItem.monitoredItemId)\n        }\n\n        if (coreListener.core.isNodeId(monitoredItem.itemToMonitor.nodeId)) {\n          coreListener.internalDebugLog('Terminate Monitored Item ' + monitoredItem.itemToMonitor.nodeId)\n          if (node.monitoredASO.has(nodeId.toString())) {\n            node.monitoredASO.delete(nodeId.toString())\n          }\n        } else {\n          coreListener.internalDebugLog('monitoredItem NodeId is not valid Id:' + monitoredItem.monitoredItemId)\n          node.monitoredASO.forEach(function (value, key, map) {\n            coreListener.internalDebugLog('monitoredItem removing from ASO list key:' + key + ' value ' + value.monitoredItemId)\n            if (value.monitoredItemId && value.monitoredItemId === monitoredItem.monitoredItemId) {\n              coreListener.internalDebugLog('monitoredItem removed from ASO list' + key)\n              map.delete(key)\n            }\n          })\n        }\n\n        node.updateSubscriptionStatus()\n      }\n    }\n\n    node.setMonitoring = function (monitoredItem) {\n      if (!coreListener.core.isNodeId(monitoredItem.itemToMonitor.nodeId)) {\n        coreListener.internalDebugLog('monitoredItem NodeId is not valid Id:' + monitoredItem.monitoredItemId)\n      }\n\n      coreListener.internalDebugLog('add monitoredItem to list')\n      node.monitoredItems.set(monitoredItem.monitoredItemId, monitoredItem)\n\n      monitoredItem.on('changed', function (dataValue) {\n        if (!monitoredItem.monitoringParameters.filter) {\n          node.sendDataFromMonitoredItem(monitoredItem, dataValue)\n        } else {\n          node.sendDataFromEvent(monitoredItem, dataValue)\n        }\n      })\n\n      monitoredItem.on('error', function (err) {\n        coreListener.internalDebugLog(err + ' on ' + monitoredItem.monitoredItemId)\n        if (node.showErrors) {\n          node.error(err, {payload: 'Monitored Item Error', monitoredItem: monitoredItem})\n        }\n\n        node.updateMonitoredItemLists(monitoredItem, monitoredItem.itemToMonitor.nodeId)\n\n        if (err.message && err.message.includes('BadSession')) {\n          node.sendAllMonitoredItems('BAD SESSION')\n          node.connector.resetBadSession()\n        }\n      })\n\n      monitoredItem.on('terminated', function () {\n        coreListener.internalDebugLog('Terminated For ' + monitoredItem.monitoredItemId)\n        node.updateMonitoredItemLists(monitoredItem, monitoredItem.itemToMonitor.nodeId)\n      })\n    }\n\n    node.sendDataFromMonitoredItem = function (monitoredItem, dataValue) {\n      let msg = {\n        payload: {},\n        topic: node.topic,\n        addressSpaceItems: [{name: '', nodeId: (coreListener.core.isNodeId(monitoredItem.itemToMonitor.nodeId)) ? monitoredItem.itemToMonitor.nodeId.toString() : 'invalid', datatypeName: ''}],\n        nodetype: 'listen',\n        injectType: 'subscribe'\n      }\n\n      let dataValuesString = {}\n      if (node.justValue) {\n        dataValuesString = JSON.stringify(dataValue, null, 2)\n        try {\n          RED.util.setMessageProperty(msg, 'payload', JSON.parse(dataValuesString))\n        } catch (err) {\n          if (node.showErrors) {\n            node.warn('JSON not to parse from string for monitored item')\n            node.error(err, msg)\n          }\n\n          msg.payload = dataValuesString\n          msg.error = err.message\n        }\n      } else {\n        msg.payload = { dataValue: dataValue, monitoredItem: monitoredItem }\n      }\n\n      coreListener.detailDebugLog('sendDataFromMonitoredItem: ' + msg)\n      node.send(msg)\n    }\n\n    node.sendDataFromEvent = function (monitoredItem, dataValue) {\n      let msg = {\n        payload: {},\n        topic: node.topic,\n        addressSpaceItems: [{name: '', nodeId: (coreListener.core.isNodeId(monitoredItem.itemToMonitor.nodeId)) ? monitoredItem.itemToMonitor.nodeId.toString() : 'invalid', datatypeName: ''}],\n        nodetype: 'listen',\n        injectType: 'event'\n      }\n\n      coreListener.analyzeEvent(node.opcuaSession, node.getBrowseName, dataValue)\n        .then(function (eventResults) {\n          coreListener.eventDetailDebugLog('Monitored Event Results ' + eventResults)\n\n          let dataValuesString = {}\n          if (node.justValue) {\n            dataValuesString = JSON.stringify({ dataValue: dataValue }, null, 2)\n            try {\n              RED.util.setMessageProperty(msg, 'payload', JSON.parse(dataValuesString))\n            } catch (err) {\n              if (node.showErrors) {\n                node.warn('JSON not to parse from string for monitored item')\n                node.error(err, msg)\n              }\n\n              msg.payload = dataValuesString\n              msg.error = err.message\n            }\n          } else {\n            msg.payload = { dataValue: dataValue, eventResults: eventResults, monitoredItem: monitoredItem }\n          }\n\n          coreListener.detailDebugLog('sendDataFromEvent: ' + msg)\n          node.send(msg)\n        }).catch(function (err) {\n          node.errorHandling(err)\n        })\n    }\n\n    node.errorHandling = function (err) {\n      coreListener.internalDebugLog(err)\n      if (node.showErrors) {\n        node.error(err, {payload: 'Error Handling'})\n      }\n\n      if (err) {\n        if (coreListener.core.isSessionBad(err)) {\n          node.sendAllMonitoredItems('BAD SESSION')\n          node.connector.resetBadSession()\n        }\n      }\n    }\n\n    node.makeSubscription = function (parameters, callback) {\n      if (!node.opcuaSession) {\n        coreListener.internalDebugLog('Subscription Session Not Valid')\n        return\n      }\n\n      if (!parameters) {\n        coreListener.internalDebugLog('Subscription Parameters Not Valid')\n        return\n      } else {\n        coreListener.internalDebugLog('Subscription Parameters: ' + parameters)\n      }\n\n      uaSubscription = new coreListener.core.nodeOPCUA.ClientSubscription(node.opcuaSession, parameters)\n      coreListener.internalDebugLog('New Subscription Created')\n\n      uaSubscription.on('initialized', function () {\n        coreListener.internalDebugLog('Subscription initialized')\n        node.subscriptionStarting = true\n        node.setNodeStatusTo('initialized')\n      })\n\n      uaSubscription.on('started', function () {\n        coreListener.internalDebugLog('Subscription started')\n        node.setNodeStatusTo('started')\n        node.monitoredItems.clear()\n        node.subscriptionStarting = false\n        node.subscriptionStarted = true\n        callback()\n      })\n\n      uaSubscription.on('terminated', function () {\n        coreListener.internalDebugLog('Subscription terminated')\n        node.subscriptionStarting = false\n        node.subscriptionStarted = false\n        node.setNodeStatusTo('terminated')\n        node.resetSubscription()\n      })\n\n      uaSubscription.on('internal_error', function (err) {\n        node.subscriptionStarted = false\n        coreListener.internalDebugLog(err)\n        if (node.showErrors) {\n          node.error(err, {payload: 'Internal Error'})\n        }\n        node.setNodeStatusTo('error')\n        node.resetSubscription()\n      })\n\n      uaSubscription.on('item_added', function (monitoredItem) {\n        node.setMonitoring(monitoredItem)\n        node.updateSubscriptionStatus()\n      })\n    }\n\n    node.getBrowseName = function (session, nodeId, callback) {\n      coreListener.client.read(session, [{\n        nodeId: nodeId,\n        attributeId: AttributeIds.BrowseName\n      }], function (err, org, readValue) {\n        if (!err) {\n          if (readValue[0].statusCode === StatusCodes.Good) {\n            let browseName = readValue[0].value.value.name\n            return callback(null, browseName)\n          }\n        }\n        callback(err, 'Unknown')\n      })\n    }\n\n    node.on('input', function (msg) {\n      if (msg.nodetype === 'browse') { /* browse is just to address listening to many nodes */\n        msg.nodetype = 'inject'\n        msg.injectType = 'listen'\n        msg.addressSpaceItems = coreListener.core.buildNodesToListen(msg)\n      }\n\n      if (!msg.addressSpaceItems || !msg.addressSpaceItems.length) {\n        coreListener.subscribeDebugLog('Address-Space-Item Set Not Valid')\n        if (node.showErrors) {\n          node.error(new Error('Address-Space-Item Set Not Valid'), msg)\n        }\n        return\n      }\n\n      // start here to check connection to get unit-tests working while there is no mocking\n      // TODO: Connector mocking\n      if (node.connector.stateMachine.getMachineState() !== 'OPEN') {\n        coreListener.internalDebugLog('Client State Not Open On Browse')\n        if (node.showErrors) {\n          node.error(new Error('Client Not Open On Browse'), msg)\n        }\n        return\n      }\n\n      if (!node.opcuaSession) {\n        coreListener.internalDebugLog('Session Not Ready To Listen')\n        if (node.showErrors) {\n          node.error(new Error('Session Not Ready To Listen'), msg)\n        }\n        return\n      }\n\n      switch (node.action) {\n        case 'subscribe':\n          node.subscribeActionInput(msg)\n          break\n        case 'events':\n          node.subscribeEventsInput(msg)\n          break\n        default:\n          throw new TypeError('Unknown Action Type')\n      }\n    })\n\n    node.setOPCUAConnected = function (opcuaClient) {\n      node.opcuaClient = opcuaClient\n      node.setNodeStatusTo('connected')\n    }\n\n    node.opcuaSessionStarted = function (opcuaSession) {\n      node.opcuaSession = opcuaSession\n      node.setNodeStatusTo('active')\n    }\n\n    node.connectorShutdown = function (opcuaClient) {\n      coreListener.internalDebugLog('Connector Shutdown')\n      if (opcuaClient) {\n        node.opcuaClient = opcuaClient\n      }\n    }\n\n    if (node.connector) {\n      node.connector.on('connected', node.setOPCUAConnected)\n      node.connector.on('session_started', node.opcuaSessionStarted)\n      node.connector.on('after_reconnection', node.connectorShutdown)\n    } else {\n      throw new TypeError('Connector Not Valid')\n    }\n\n    coreListener.core.setNodeInitalState(node.connector.stateMachine.getMachineState(), node)\n\n    // subscriptions are deleted from OPCUAClient on Connector close\n  }\n\n  RED.nodes.registerType('OPCUA-IIoT-Listener', OPCUAIIoTListener)\n}\n"]}