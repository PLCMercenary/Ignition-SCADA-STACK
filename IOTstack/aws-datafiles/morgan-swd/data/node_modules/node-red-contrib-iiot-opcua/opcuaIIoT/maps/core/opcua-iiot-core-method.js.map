{"version":3,"sources":["core/opcua-iiot-core-method.js"],"names":["require","install","de","biancoroyal","opcua","iiot","core","method","internalDebugLog","getArgumentDefinition","session","msg","Promise","reject","methodId","coerceNodeId","err","inputArguments","outputArguments","results","methodDefinition","resolve","Error","callMethods","this","nodeOPCUA","element","dataType","index","array","value","convertDataValueByDataType","objectId","call","methodCalls","buildMessagesFromMethodCalls","methodCallsResults","messages","resultMessages","module","exports"],"mappings":"AAOA,aACAA,QAAQ,sBAAsBC,UAS9B,IAAIC,GAAKA,IAAM,CAACC,YAAa,CAACC,MAAO,CAACC,KAAM,CAACC,KAAM,CAACC,OAAQ,QAA5DL,GAAAC,YAAeC,MAACD,KAAAA,KAAaI,OAACH,KAAQC,GAAMF,YAAQI,MAAQF,KAAvBC,KAA+BC,OAAAD,MAAAN,QAAA,qBAArDE,GACfA,YAAGC,MAAYC,KAAMC,KAAKC,OAAKC,iBAAiBJ,GAAAA,YAAHC,MAA+BG,KAAAA,KAAOD,OAAQN,kBAAQA,QAAqB,QAArBA,CAAqB,oBACxHE,GAAGC,YAAYC,MAAMC,KAAKC,KAAKC,OAAOC,eAAtCN,GAAyDA,YAAGC,MAAYC,KAAMC,KAAKC,OAAKC,gBAA/BP,QAA0DA,QAA1DA,CAAkE,4BAG3HE,GAAGC,YAAYC,MAAMC,KAAKC,KAAKC,OAAOE,sBAAwB,SAAUC,EAASC,GAAjFT,IAAGC,EAAkBE,KAAKC,KAAKC,UAAOE,aAGpC,OAAO,IAAIG,QAAX,SAAWA,EACTC,GACE,GAAKH,EAGH,IACE,IAAII,EAAWC,EAAaJ,EAAIG,UAEhCJ,EAAQD,sBAAsBK,EAAU,SAAUE,EAAKC,EAAgBC,GACrE,GAAIF,EACFH,EAAOG,OACF,CACL,IAAIG,EAAJ,GACAA,EAAQL,SAAWA,EACnBK,EAAQC,iBAAR,GACAD,EAAQC,iBAAiBH,eAAiBA,EAC1CE,EAAQC,iBAAiBF,gBAAkBA,EAC3CG,EAAQF,MAGZ,MAAOH,GACPH,EAAOG,QAlBTH,EAAO,IAAIS,MAAM,oDAwBzBpB,GAAGC,YAAYC,MAAMC,KAAKC,KAAKC,OAAOgB,YAAc,SAAUb,EAASC,GACrE,IAAIL,EAAOkB,KAAKlB,KACZS,EAAeS,KAAKlB,KAAKmB,UAAUV,aAEvC,OAAO,IAAIH,QAEP,SAAKF,EAASG,GACZA,GAAAA,EAGEF,IACEe,EAAAA,eAAmBA,QAAQC,SAA3BD,EAAAE,EAAAC,GACAH,EAAQI,SAAaC,EAAAA,SAFvBL,EAAAI,MAAAxB,EAAAyB,2BAAA,CAAAD,MAAAJ,EAAAI,OAAAJ,EAAAC,YAMEK,IAAAA,EAAUjB,CAAAA,CACVD,SAAUC,EAAaJ,EAAIG,UAC3BG,SAAAA,EAAoBA,EAAAA,UAHtBA,eAAAN,EAAAM,iBAOEP,EAAAuB,KAASC,EAAA,SAAAlB,EAAAG,GACPN,EADFA,EAEOG,GAENK,EAAA,CAAAF,QAAAA,EAAAR,IAAAA,MAGHE,MAAOG,GACRH,EAAAG,QAxBHH,EAEO,IAAAS,MAAA,sCA4BXpB,GAAAC,YAAWS,MACTP,KAAAC,KAAUe,OAAVc,6BAA2B,SAAAC,GACzB,OAAKA,IAAAA,QACHvB,SAAOQ,EAAUR,GADnB,GAEOuB,EAELf,CANNA,EAAA,CAAAe,mBAAAA,EAAAC,SAOK,UAFCxB,EAAIyB,IAAAA,MAAAA,0DAMZC,OAAOC,QAAUtC,GAAGC,YAAYC,MAAMC,KAAKC,KAAKC","file":"../../core/opcua-iiot-core-method.js","sourcesContent":["/**\n The BSD 3-Clause License\n\n Copyright 2017,2018 - Klaus Landsdorf (http://bianco-royal.de/)\n All rights reserved.\n node-red-contrib-iiot-opcua\n */\n'use strict'\nrequire('source-map-support').install()\n\n/**\n * Nested namespace settings.\n *\n * @type {{biancoroyal: {opcua: {iiot: {core: {method: {}}}}}}}\n *\n * @Namesapce de.biancoroyal.opcua.iiot.core.method\n */\nvar de = de || {biancoroyal: {opcua: {iiot: {core: {method: {}}}}}} // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.method.core = de.biancoroyal.opcua.iiot.core.method.core || require('./opcua-iiot-core') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.method.internalDebugLog = de.biancoroyal.opcua.iiot.core.method.internalDebugLog || require('debug')('opcuaIIoT:method') // eslint-disable-line no-use-before-define\nde.biancoroyal.opcua.iiot.core.method.detailDebugLog = de.biancoroyal.opcua.iiot.core.method.detailDebugLog || require('debug')('opcuaIIoT:method:details') // eslint-disable-line no-use-before-define\n\nde.biancoroyal.opcua.iiot.core.method.getArgumentDefinition = function (session, msg) {\n  let coerceNodeId = this.core.nodeOPCUA.coerceNodeId\n\n  return new Promise(\n    function (resolve, reject) {\n      if (!session) {\n        reject(new Error('Method Argument Definition Session Not Valid'))\n      } else {\n        try {\n          let methodId = coerceNodeId(msg.methodId)\n\n          session.getArgumentDefinition(methodId, function (err, inputArguments, outputArguments) {\n            if (err) {\n              reject(err)\n            } else {\n              let results = {}\n              results.methodId = methodId\n              results.methodDefinition = {}\n              results.methodDefinition.inputArguments = inputArguments\n              results.methodDefinition.outputArguments = outputArguments\n              resolve(results)\n            }\n          })\n        } catch (err) {\n          reject(err)\n        }\n      }\n    })\n}\n\nde.biancoroyal.opcua.iiot.core.method.callMethods = function (session, msg) {\n  let core = this.core\n  let coerceNodeId = this.core.nodeOPCUA.coerceNodeId\n\n  return new Promise(\n    function (resolve, reject) {\n      if (!session) {\n        reject(new Error('Methods Call Session Not Valid'))\n      } else {\n        try {\n          msg.inputArguments.forEach(function (element, index, array) {\n            element.dataType = element.dataType\n            element.value = core.convertDataValueByDataType({ value: element.value }, element.dataType)\n          })\n\n          let methodCalls = [{\n            objectId: coerceNodeId(msg.objectId),\n            methodId: coerceNodeId(msg.methodId),\n            inputArguments: msg.inputArguments\n          }]\n\n          session.call(methodCalls, function (err, results) {\n            if (err) {\n              reject(err)\n            } else {\n              resolve({ results: results, msg: msg })\n            }\n          })\n        } catch (err) {\n          reject(err)\n        }\n      }\n    })\n}\n\nde.biancoroyal.opcua.iiot.core.method.buildMessagesFromMethodCalls = function (methodCallsResults) {\n  return new Promise(\n    function (resolve, reject) {\n      if (!methodCallsResults) {\n        reject(new Error('Methods Call Results To Messages Session Not Valid'))\n      } else {\n        let resultMessages = []\n        resolve({methodCallsResults: methodCallsResults, messages: resultMessages})\n      }\n    })\n}\n\nmodule.exports = de.biancoroyal.opcua.iiot.core.method\n"]}